From 591a3bf31393256839e35cb2268bbbf0d6c5848e Mon Sep 17 00:00:00 2001
From: Indhi Rousseau <contact@thekinrar.fr>
Date: Tue, 3 Dec 2019 17:34:43 +0000
Subject: [PATCH] Implement CommandBlockExecuteEvent


diff --git a/src/main/java/net/minecraft/server/#CommandBlockListenerAbstract.java# b/src/main/java/net/minecraft/server/#CommandBlockListenerAbstract.java#
new file mode 100644
index 0000000000..ae1aaa2483
--- /dev/null
+++ b/src/main/java/net/minecraft/server/#CommandBlockListenerAbstract.java#
@@ -0,0 +1,230 @@
+package net.minecraft.server;
+
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import javax.annotation.Nullable;
+
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.event.block.CommandBlockExecuteEvent;
+
+public abstract class CommandBlockListenerAbstract implements ICommandListener {
+
+    private static final SimpleDateFormat b = new SimpleDateFormat("HH:mm:ss");
+    private static final IChatBaseComponent c = new ChatComponentText("@");
+    private long lastExecution = -1L;
+    private boolean updateLastExecution = true;
+    private int successCount;
+    private boolean trackOutput = true;
+    private IChatBaseComponent lastOutput;
+    private String command = "";
+    private IChatBaseComponent customName;
+    // CraftBukkit start
+    @Override
+    public abstract CommandSender getBukkitSender(CommandListenerWrapper wrapper);
+    // CraftBukkit end
+
+    public CommandBlockListenerAbstract() {
+        this.customName = CommandBlockListenerAbstract.c;
+    }
+
+    public int i() {
+        return this.successCount;
+    }
+
+    public void a(int i) {
+        this.successCount = i;
+    }
+
+    public IChatBaseComponent j() {
+        return (IChatBaseComponent) (this.lastOutput == null ? new ChatComponentText("") : this.lastOutput);
+    }
+
+    public NBTTagCompound a(NBTTagCompound nbttagcompound) {
+        nbttagcompound.setString("Command", this.command);
+        nbttagcompound.setInt("SuccessCount", this.successCount);
+        nbttagcompound.setString("CustomName", IChatBaseComponent.ChatSerializer.a(this.customName));
+        nbttagcompound.setBoolean("TrackOutput", this.trackOutput);
+        if (this.lastOutput != null && this.trackOutput) {
+            nbttagcompound.setString("LastOutput", IChatBaseComponent.ChatSerializer.a(this.lastOutput));
+        }
+
+        nbttagcompound.setBoolean("UpdateLastExecution", this.updateLastExecution);
+        if (this.updateLastExecution && this.lastExecution > 0L) {
+            nbttagcompound.setLong("LastExecution", this.lastExecution);
+        }
+
+        return nbttagcompound;
+    }
+
+    public void b(NBTTagCompound nbttagcompound) {
+        this.command = nbttagcompound.getString("Command");
+        this.successCount = nbttagcompound.getInt("SuccessCount");
+        if (nbttagcompound.hasKeyOfType("CustomName", 8)) {
+            this.setName(MCUtil.getBaseComponentFromNbt("CustomName", nbttagcompound)); // Paper - Catch ParseException
+        }
+
+        if (nbttagcompound.hasKeyOfType("TrackOutput", 1)) {
+            this.trackOutput = nbttagcompound.getBoolean("TrackOutput");
+        }
+
+        if (nbttagcompound.hasKeyOfType("LastOutput", 8) && this.trackOutput) {
+            try {
+                this.lastOutput = IChatBaseComponent.ChatSerializer.a(nbttagcompound.getString("LastOutput"));
+            } catch (Throwable throwable) {
+                this.lastOutput = new ChatComponentText(throwable.getMessage());
+            }
+        } else {
+            this.lastOutput = null;
+        }
+
+        if (nbttagcompound.hasKey("UpdateLastExecution")) {
+            this.updateLastExecution = nbttagcompound.getBoolean("UpdateLastExecution");
+        }
+
+        if (this.updateLastExecution && nbttagcompound.hasKey("LastExecution")) {
+            this.lastExecution = nbttagcompound.getLong("LastExecution");
+        } else {
+            this.lastExecution = -1L;
+        }
+
+    }
+
+    public void setCommand(String s) {
+        this.command = s;
+        this.successCount = 0;
+    }
+
+    public String getCommand() {
+        return this.command;
+    }
+
+    public boolean a(World world) {
+        if (!world.isClientSide && world.getTime() != this.lastExecution) {
+            if ("Searge".equalsIgnoreCase(this.command)) {
+                this.lastOutput = new ChatComponentText("#itzlipofutzli");
+                this.successCount = 1;
+                return true;
+            } else {
+                this.successCount = 0;
+                MinecraftServer minecraftserver = this.d().getMinecraftServer();
+
+                if (minecraftserver != null && minecraftserver.J() && minecraftserver.getEnableCommandBlock() && !UtilColor.b(this.command)) {
+                    try {
+
+			0;115;0c<<<<<<< HEAD
+                        this.lastOutput = null;
+                        CommandListenerWrapper commandlistenerwrapper = this.getWrapper().a((commandcontext, flag, i) -> {
+                            if (flag) {
+                                ++this.successCount;
+                            }
+
+                        });
+
+                        minecraftserver.getCommandDispatcher().dispatchServerCommand(commandlistenerwrapper, this.command); // CraftBukkit
+=======
+                        Entity entity = this.getWrapper().getEntity();
+
+                        CommandBlockExecuteEvent event = new CommandBlockExecuteEvent(
+                                this.getBukkitSender(this.getWrapper()),
+                                entity == null ? CraftBlock.at(this.getWrapper().getWorld(), new BlockPosition(this.getWrapper().getPosition())) : null,
+                                entity == null ? null : CraftEntity.getEntity(minecraftserver.server, entity),
+                                this.command);
+
+                        Bukkit.getServer().getPluginManager().callEvent(event);
+
+                        if(!event.isCancelled()) {
+                            this.lastOutput = null;
+                            this.successCount = minecraftserver.getCommandDispatcher().dispatchServerCommand(this.getWrapper(), event.getCommand()); // CraftBukkit
+                        }
+>>>>>>> Implement CommandBlockExecuteEvent
+                    } catch (Throwable throwable) {
+                        CrashReport crashreport = CrashReport.a(throwable, "Executing command block");
+                        CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Command to be executed");
+
+                        crashreportsystemdetails.a("Command", this::getCommand);
+                        crashreportsystemdetails.a("Name", () -> {
+                            return this.getName().getString();
+                        });
+                        throw new ReportedException(crashreport);
+                    }
+                }
+
+                if (this.updateLastExecution) {
+                    this.lastExecution = world.getTime();
+                } else {
+                    this.lastExecution = -1L;
+                }
+
+                return true;
+            }
+        } else {
+            return false;
+        }
+    }
+
+    public IChatBaseComponent getName() {
+        return this.customName;
+    }
+
+    public void setName(@Nullable IChatBaseComponent ichatbasecomponent) {
+        if (ichatbasecomponent != null) {
+            this.customName = ichatbasecomponent;
+        } else {
+            this.customName = CommandBlockListenerAbstract.c;
+        }
+
+    }
+
+    @Override
+    public void sendMessage(IChatBaseComponent ichatbasecomponent) {
+        if (this.trackOutput) {
+            this.lastOutput = (new ChatComponentText("[" + CommandBlockListenerAbstract.b.format(new Date()) + "] ")).addSibling(ichatbasecomponent);
+            this.e();
+        }
+
+    }
+
+    public abstract WorldServer d();
+
+    public abstract void e();
+
+    public void c(@Nullable IChatBaseComponent ichatbasecomponent) {
+        this.lastOutput = ichatbasecomponent;
+    }
+
+    public void a(boolean flag) {
+        this.trackOutput = flag;
+    }
+
+    public boolean a(EntityHuman entityhuman) {
+        if (!entityhuman.isCreativeAndOp()) {
+            return false;
+        } else {
+            if (entityhuman.getWorld().isClientSide) {
+                entityhuman.a(this);
+            }
+
+            return true;
+        }
+    }
+
+    public abstract CommandListenerWrapper getWrapper();
+
+    @Override
+    public boolean shouldSendSuccess() {
+        return this.d().getGameRules().getBoolean(GameRules.SEND_COMMAND_FEEDBACK) && this.trackOutput;
+    }
+
+    @Override
+    public boolean shouldSendFailure() {
+        return this.trackOutput;
+    }
+
+    @Override
+    public boolean shouldBroadcastCommands() {
+        return this.d().getGameRules().getBoolean(GameRules.COMMAND_BLOCK_OUTPUT);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java b/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
index 6a0d70033b..23282afc51 100644
--- a/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
+++ b/src/main/java/net/minecraft/server/CommandBlockListenerAbstract.java
@@ -1,10 +1,14 @@
 package net.minecraft.server;
 
-import com.mojang.brigadier.context.CommandContext;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import javax.annotation.Nullable;
+
+import org.bukkit.Bukkit;
 import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.event.block.CommandBlockExecuteEvent;
 
 public abstract class CommandBlockListenerAbstract implements ICommandListener {
 
@@ -109,15 +113,27 @@ public abstract class CommandBlockListenerAbstract implements ICommandListener {
 
                 if (minecraftserver != null && minecraftserver.K() && minecraftserver.getEnableCommandBlock() && !UtilColor.b(this.command)) {
                     try {
-                        this.lastOutput = null;
-                        CommandListenerWrapper commandlistenerwrapper = this.getWrapper().a((commandcontext, flag, i) -> {
-                            if (flag) {
-                                ++this.successCount;
-                            }
+                        Entity entity = this.getWrapper().getEntity();
 
-                        });
+                        CommandBlockExecuteEvent event = new CommandBlockExecuteEvent(
+                                this.getBukkitSender(this.getWrapper()),
+                                entity == null ? CraftBlock.at(this.getWrapper().getWorld(), new BlockPosition(this.getWrapper().getPosition())) : null,
+                                entity == null ? null : CraftEntity.getEntity(minecraftserver.server, entity),
+                                this.command);
+
+                        Bukkit.getServer().getPluginManager().callEvent(event);
+
+                        if(!event.isCancelled()) {
+                            this.lastOutput = null;
+                            CommandListenerWrapper commandlistenerwrapper = this.getWrapper().a((commandcontext, flag, i) -> {
+                                if (flag) {
+                                    ++this.successCount;
+                                }
+
+                            });
 
-                        minecraftserver.getCommandDispatcher().dispatchServerCommand(commandlistenerwrapper, this.command); // CraftBukkit
+                            minecraftserver.getCommandDispatcher().dispatchServerCommand(commandlistenerwrapper, event.getCommand()); // CraftBukkit
+                        }
                     } catch (Throwable throwable) {
                         CrashReport crashreport = CrashReport.a(throwable, "Executing command block");
                         CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Command to be executed");
-- 
2.27.0

