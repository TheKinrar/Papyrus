From 3e2b14a917f96b7ebc4dce6ffb9b9aa62e79dcad Mon Sep 17 00:00:00 2001
From: Indhi Rousseau <contact@thekinrar.fr>
Date: Sun, 3 Nov 2019 16:08:17 +0000
Subject: [PATCH] Hybrid mode implementation


diff --git a/src/main/java/co/aikar/timings/MinecraftTimings.java b/src/main/java/co/aikar/timings/MinecraftTimings.java
index 69e26a826..a69a9da46 100644
--- a/src/main/java/co/aikar/timings/MinecraftTimings.java
+++ b/src/main/java/co/aikar/timings/MinecraftTimings.java
@@ -42,6 +42,8 @@ public final class MinecraftTimings {
     public static final Timing antiXrayUpdateTimer = Timings.ofSafe("anti-xray - update");
     public static final Timing antiXrayObfuscateTimer = Timings.ofSafe("anti-xray - obfuscate");
 
+    public static final Timing hybridEngineTimer = Timings.ofSafe("Hybrid Engine");
+
     private static final Map<Class<?>, String> taskNameCache = new MapMaker().weakKeys().makeMap();
 
     private MinecraftTimings() {}
diff --git a/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java b/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java
index b151a13c1..476969465 100644
--- a/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java
+++ b/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java
@@ -7,6 +7,7 @@ import com.mojang.authlib.properties.Property;
 import com.mojang.authlib.properties.PropertyMap;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.UserCache;
+import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.spigotmc.SpigotConfig;
 
@@ -149,6 +150,8 @@ public class CraftPlayerProfile implements PlayerProfile {
             boolean isOnlineMode = server.getOnlineMode() || (SpigotConfig.bungee && PaperConfig.bungeeOnlineMode);
             if (isOnlineMode) {
                 profile = lookupName ? userCache.getProfile(name) : userCache.getProfileIfCached(name);
+            } else if(Bukkit.getHybridMode()) {
+                profile = new GameProfile(server.server.getHybridEngine().getIdForOfflinePlayer(this.profile), name);
             } else {
                 // Make an OfflinePlayer using an offline mode UUID since the name has no profile
                 profile = new GameProfile(UUID.nameUUIDFromBytes(("OfflinePlayer:" + name).getBytes(Charsets.UTF_8)), name);
diff --git a/src/main/java/fr/thekinrar/papyrus/Metrics.java b/src/main/java/fr/thekinrar/papyrus/Metrics.java
index 7c284c9b2..ff7346e59 100644
--- a/src/main/java/fr/thekinrar/papyrus/Metrics.java
+++ b/src/main/java/fr/thekinrar/papyrus/Metrics.java
@@ -593,7 +593,7 @@ public class Metrics {
                 }));
 
                 metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
-                metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : "offline"));
+                metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : (Bukkit.getHybridMode() ? "hybrid" : "offline")));
                 metrics.addCustomChart(new Metrics.SimplePie("papyrus_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown"));
 
                 metrics.addCustomChart(new Metrics.DrilldownPie("java_version", () -> {
diff --git a/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java b/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java
index 4168eafc0..4a937eb53 100644
--- a/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java
+++ b/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java
@@ -1,34 +1,29 @@
 package fr.thekinrar.papyrus;
 
-import co.aikar.timings.Timings;
-import co.aikar.timings.TimingsManager;
-import com.destroystokyo.paper.PaperCommand;
-import com.destroystokyo.paper.io.chunk.ChunkTaskManager;
-import com.google.common.base.Strings;
 import com.google.common.base.Throwables;
-import com.google.common.collect.Lists;
+import fr.thekinrar.papyrus.commands.ChangepassCommand;
+import fr.thekinrar.papyrus.commands.LoginCommand;
+import fr.thekinrar.papyrus.commands.LogoutCommand;
+import fr.thekinrar.papyrus.commands.RegisterCommand;
+import fr.thekinrar.papyrus.hybrid.CraftHybridEngine;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
-import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
-import org.spigotmc.SpigotConfig;
-import org.spigotmc.WatchdogThread;
 
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
-import java.nio.charset.StandardCharsets;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
-import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 public class PapyrusConfig {
@@ -62,6 +57,10 @@ public class PapyrusConfig {
         verbose = getBoolean("verbose", false);
 
         commands = new HashMap<String, Command>();
+        commands.put("changepass", new ChangepassCommand("changepass"));
+        commands.put("login", new LoginCommand("login"));
+        commands.put("logout", new LogoutCommand("logout"));
+        commands.put("register", new RegisterCommand("register"));
 
         version = getInt("config-version", 1);
         set("config-version", 1);
@@ -190,4 +189,121 @@ public class PapyrusConfig {
         config.addDefault(path, def);
         return config.getString(path, config.getString(path));
     }
+
+    public static boolean hybridMode = false;
+    private static void hybridMode() {
+        hybridMode = getBoolean("settings.hybridMode", false);
+    }
+
+    public static List<String> hybridOfflineOnlyHosts = Collections.emptyList();
+    private static void hybridOfflineOnlyHosts()
+    {
+        hybridOfflineOnlyHosts = getList( "hybrid.offline-only-hosts", hybridOfflineOnlyHosts);
+    }
+
+    public static boolean hybridEnableAuthentication = true;
+    private static void hybridEnableAuthentication() {
+        hybridEnableAuthentication = getBoolean("hybrid.authentication", hybridEnableAuthentication);
+    }
+
+    public static int hybridAuthTimeout = 60000;
+    private static void hybridAuthTimeout() {
+        hybridAuthTimeout = getInt("settings.authTimeout", hybridAuthTimeout);
+    }
+
+    public static int hybridRequestLoginInterval = 200;
+    private static void hybridRequestLoginInterval() {
+        hybridRequestLoginInterval = getInt("settings.hybrid.request-login-interval", hybridRequestLoginInterval);
+    }
+
+    public static String hybridRequestLoginMessage = "&e&lPlease login using /login <password>";
+    private static void hybridRequestLoginMessage() {
+        hybridRequestLoginMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.request-login", hybridRequestLoginMessage));
+    }
+
+    public static String hybridRequestRegisterMessage = "&e&lPlease register using /register <password> <password confirmation>";
+    private static void hybridRequestRegisterMessage() {
+        hybridRequestRegisterMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.request-register", hybridRequestRegisterMessage));
+    }
+
+    public static String hybridCommandUnavailableMessage = "&cCommand unavailable.";
+    private static void hybridCommandUnavailableMessage() {
+        hybridCommandUnavailableMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.command-unavailable", hybridCommandUnavailableMessage));
+    }
+
+    public static String hybridPlayerOnlyCommandMessage = "&cOnly players can use this command.";
+    private static void hybridPlayerOnlyCommandMessage() {
+        hybridPlayerOnlyCommandMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.player-only-command", hybridPlayerOnlyCommandMessage));
+    }
+
+    public static String hybridAlreadyLoggedInMessage = "&cAlready logged in.";
+    private static void hybridAlreadyLoggedInMessage() {
+        hybridAlreadyLoggedInMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.already-logged-in", hybridAlreadyLoggedInMessage));
+    }
+
+    public static String hybridAlreadyRegisteredMessage = "&cAlready registered.";
+    private static void hybridAlreadyRegisteredMessage() {
+        hybridAlreadyRegisteredMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.already-registered", hybridAlreadyRegisteredMessage));
+    }
+
+    public static String hybridSuccessfulLoginMessage = "&eSuccessfully logged in.";
+    private static void hybridSuccessfulLoginMessage() {
+        hybridSuccessfulLoginMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.successful-login", hybridSuccessfulLoginMessage));
+    }
+
+    public static Map<CraftHybridEngine.AutoLoginReason, String> hybridAutoLoginMessages = new HashMap<>(CraftHybridEngine.AutoLoginReason.values().length);
+    private static void hybridAutoLoginMessages() {
+        Object old = config.get("messages.hybrid.auto-login", null);
+
+        if(old instanceof String) {
+            config.set("messages.hybrid.auto-login", null);
+
+            if(!old.equals("&eSuccessfully logged in (auto).")) {
+                for (CraftHybridEngine.AutoLoginReason reason : CraftHybridEngine.AutoLoginReason.values()) {
+                    hybridAutoLoginMessages.put(reason, ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.auto-login." + reason.name().toLowerCase(), (String) old)));
+                }
+            } else {
+                hybridAutoLoginMessages();
+            }
+        } else {
+            for(CraftHybridEngine.AutoLoginReason reason : CraftHybridEngine.AutoLoginReason.values()) {
+                hybridAutoLoginMessages.put(reason, ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.auto-login." + reason.name().toLowerCase(), "&eSuccessfully logged in (auto: " + reason + ").")));
+            }
+        }
+    }
+
+    public static String hybridFailedLoginMessage = "&cInvalid password.";
+    private static void hybridFailedLoginMessage() {
+        hybridFailedLoginMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.failed-login", hybridFailedLoginMessage));
+    }
+
+    public static String hybridSuccessfulRegisterMessage = "&eSuccessfully registered.";
+    private static void hybridSuccessfulRegisterMessage() {
+        hybridSuccessfulRegisterMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.successful-register", hybridSuccessfulRegisterMessage));
+    }
+
+    public static String hybridRegisterMismatchMessage = "&cPasswords do not match.";
+    private static void hybridRegisterMismatchMessage() {
+        hybridRegisterMismatchMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.register-mismatch", hybridRegisterMismatchMessage));
+    }
+
+    public static String hybridSuccessfulChangepassMessage = "&eSuccessfully changed password.";
+    private static void hybridSuccessfulChangepassMessage() {
+        hybridSuccessfulChangepassMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.successful-changepass", hybridSuccessfulChangepassMessage));
+    }
+
+    public static String hybridAuthTimeoutMessage = "Login timed out";
+    private static void hybridAuthTimeoutMessage() {
+        hybridAuthTimeoutMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.auth-timeout", hybridAuthTimeoutMessage));
+    }
+
+    public static String hybridDuplicateNameMessage = "A player with this name is already logged in";
+    private static void hybridDuplicateNameMessage() {
+        hybridDuplicateNameMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.duplicate-name", hybridDuplicateNameMessage));
+    }
+
+    public static String hybridInvalidSessionWorkaroundMessage = "&eYour Minecraft client is using an invalid session; authentication with Mojang servers has been temporarily disabled for you.";
+    private static void hybridInvalidSessionWorkaroundMessage() {
+        hybridInvalidSessionWorkaroundMessage = ChatColor.translateAlternateColorCodes('&', getString("messages.hybrid.invalid-session-workaround", hybridInvalidSessionWorkaroundMessage));
+    }
 }
diff --git a/src/main/java/fr/thekinrar/papyrus/PapyrusPermissions.java b/src/main/java/fr/thekinrar/papyrus/PapyrusPermissions.java
new file mode 100644
index 000000000..e3d6d8bb2
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/PapyrusPermissions.java
@@ -0,0 +1,18 @@
+package fr.thekinrar.papyrus;
+
+import org.bukkit.permissions.Permission;
+import org.bukkit.permissions.PermissionDefault;
+import org.bukkit.util.permissions.DefaultPermissions;
+
+public final class PapyrusPermissions {
+    private static final String ROOT= "papyrus.command";
+
+    public static void registerPermissions() {
+        Permission parent = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all Papyrus commands");
+        DefaultPermissions.registerPermission(ROOT + ".changepass", "Gives the user the ability to use the /papyrus:changepass command", PermissionDefault.TRUE, parent);
+        DefaultPermissions.registerPermission(ROOT + ".login", "Gives the user the ability to use the /papyrus:login command", PermissionDefault.TRUE, parent);
+        DefaultPermissions.registerPermission(ROOT + ".logout", "Gives the user the ability to use the /papyrus:logout command", PermissionDefault.TRUE, parent);
+        DefaultPermissions.registerPermission(ROOT + ".register", "Gives the user the ability to use the /papyrus:register command", PermissionDefault.TRUE, parent);
+        parent.recalculatePermissibles();
+    }
+}
diff --git a/src/main/java/fr/thekinrar/papyrus/commands/ChangepassCommand.java b/src/main/java/fr/thekinrar/papyrus/commands/ChangepassCommand.java
new file mode 100644
index 000000000..c4c751177
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/commands/ChangepassCommand.java
@@ -0,0 +1,67 @@
+package fr.thekinrar.papyrus.commands;
+
+import fr.thekinrar.papyrus.PapyrusConfig;
+import fr.thekinrar.papyrus.hybrid.CraftHybridProfile;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+
+import java.util.Collections;
+import java.util.List;
+
+public class ChangepassCommand extends Command {
+
+    public ChangepassCommand(String name) {
+        super(name);
+        this.description = "Password changing for offline players";
+        this.usageMessage = "/changepass <current password> <new password> <new password confirmation>";
+        this.setPermission("papyrus.command.changepass");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (!Bukkit.getHybridMode()) {
+            sender.sendMessage(PapyrusConfig.hybridCommandUnavailableMessage);
+            return true;
+        }
+
+        if (!(sender instanceof Player)) {
+            sender.sendMessage(PapyrusConfig.hybridPlayerOnlyCommandMessage);
+            return true;
+        }
+
+        if (args.length != 3) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        CraftHybridProfile profile = ((CraftPlayer) sender).getHybridProfile();
+
+        if(!args[1].equals(args[2])) {
+            sender.sendMessage(PapyrusConfig.hybridRegisterMismatchMessage);
+            return true;
+        }
+
+        if(!profile.getEngine().verifyPassword(profile.getId(), sender.getName(), args[0])) {
+            sender.sendMessage(PapyrusConfig.hybridFailedLoginMessage);
+            return true;
+        }
+
+        profile.getEngine().setPassword(profile.getId(), args[1]);
+
+        sender.sendMessage(PapyrusConfig.hybridSuccessfulChangepassMessage);
+
+        return true;
+    }
+}
diff --git a/src/main/java/fr/thekinrar/papyrus/commands/LoginCommand.java b/src/main/java/fr/thekinrar/papyrus/commands/LoginCommand.java
new file mode 100644
index 000000000..8e48cdefd
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/commands/LoginCommand.java
@@ -0,0 +1,69 @@
+package fr.thekinrar.papyrus.commands;
+
+import fr.thekinrar.papyrus.PapyrusConfig;
+import fr.thekinrar.papyrus.hybrid.CraftHybridProfile;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+
+import java.util.Collections;
+import java.util.List;
+
+public class LoginCommand extends Command {
+
+    public LoginCommand(String name) {
+        super(name);
+        this.description = "Login command for offline players";
+        this.usageMessage = "/login <password>";
+        this.setPermission("papyrus.command.login");
+        this.setUnauthenticated(true);
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (!Bukkit.getHybridMode()) {
+            sender.sendMessage(PapyrusConfig.hybridCommandUnavailableMessage);
+            return true;
+        }
+
+        if (!(sender instanceof Player)) {
+            sender.sendMessage(PapyrusConfig.hybridPlayerOnlyCommandMessage);
+            return true;
+        }
+
+        if (args.length != 1) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        CraftHybridProfile profile = ((CraftPlayer) sender).getHybridProfile();
+
+        if(!profile.isRegistered()) {
+            profile.sendUnauthenticatedMessage();
+            return true;
+        }
+
+        if(profile.isLoggedIn()) {
+            sender.sendMessage(PapyrusConfig.hybridAlreadyLoggedInMessage);
+            return true;
+        }
+
+        if(profile.login(args[0]))
+            sender.sendMessage(PapyrusConfig.hybridSuccessfulLoginMessage);
+        else
+            sender.sendMessage(PapyrusConfig.hybridFailedLoginMessage);
+
+        return true;
+    }
+}
diff --git a/src/main/java/fr/thekinrar/papyrus/commands/LogoutCommand.java b/src/main/java/fr/thekinrar/papyrus/commands/LogoutCommand.java
new file mode 100644
index 000000000..092857612
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/commands/LogoutCommand.java
@@ -0,0 +1,55 @@
+package fr.thekinrar.papyrus.commands;
+
+import fr.thekinrar.papyrus.PapyrusConfig;
+import fr.thekinrar.papyrus.hybrid.CraftHybridProfile;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+
+import java.util.Collections;
+import java.util.List;
+
+public class LogoutCommand extends Command {
+
+    public LogoutCommand(String name) {
+        super(name);
+        this.description = "Logout command for offline players";
+        this.usageMessage = "/logout";
+        this.setPermission("papyrus.command.logout");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (!Bukkit.getHybridMode()) {
+            sender.sendMessage(PapyrusConfig.hybridCommandUnavailableMessage);
+            return true;
+        }
+
+        if (!(sender instanceof Player)) {
+            sender.sendMessage(PapyrusConfig.hybridPlayerOnlyCommandMessage);
+            return true;
+        }
+
+        CraftHybridProfile profile = ((CraftPlayer) sender).getHybridProfile();
+
+        if(!profile.isLoggedIn()) {
+            profile.sendUnauthenticatedMessage();
+            return true;
+        }
+
+        profile.logout();
+
+        return true;
+    }
+}
diff --git a/src/main/java/fr/thekinrar/papyrus/commands/RegisterCommand.java b/src/main/java/fr/thekinrar/papyrus/commands/RegisterCommand.java
new file mode 100644
index 000000000..3eab2a83a
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/commands/RegisterCommand.java
@@ -0,0 +1,68 @@
+package fr.thekinrar.papyrus.commands;
+
+import fr.thekinrar.papyrus.PapyrusConfig;
+import fr.thekinrar.papyrus.hybrid.CraftHybridProfile;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+
+import java.util.Collections;
+import java.util.List;
+
+public class RegisterCommand extends Command {
+
+    public RegisterCommand(String name) {
+        super(name);
+        this.description = "Register command for offline players";
+        this.usageMessage = "/register <password> <password confirmation>";
+        this.setPermission("papyrus.command.register");
+        this.setUnauthenticated(true);
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (!Bukkit.getHybridMode()) {
+            sender.sendMessage(PapyrusConfig.hybridCommandUnavailableMessage);
+            return true;
+        }
+
+        if (!(sender instanceof Player)) {
+            sender.sendMessage(PapyrusConfig.hybridPlayerOnlyCommandMessage);
+            return true;
+        }
+
+        if (args.length != 2) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        CraftHybridProfile profile = ((CraftPlayer) sender).getHybridProfile();
+
+        if(profile.isRegistered()) {
+            sender.sendMessage(PapyrusConfig.hybridAlreadyRegisteredMessage);
+            return true;
+        }
+
+        if(!args[0].equals(args[1])) {
+            sender.sendMessage(PapyrusConfig.hybridRegisterMismatchMessage);
+            return true;
+        }
+
+        profile.register(args[0]);
+
+        sender.sendMessage(PapyrusConfig.hybridSuccessfulRegisterMessage);
+
+        return true;
+    }
+}
diff --git a/src/main/java/fr/thekinrar/papyrus/hybrid/CraftHybridEngine.java b/src/main/java/fr/thekinrar/papyrus/hybrid/CraftHybridEngine.java
new file mode 100644
index 000000000..0b652d405
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/hybrid/CraftHybridEngine.java
@@ -0,0 +1,419 @@
+package fr.thekinrar.papyrus.hybrid;
+
+import com.mojang.authlib.GameProfile;
+import fr.thekinrar.papyrus.PapyrusConfig;
+import net.minecraft.server.EntityHuman;
+import net.minecraft.server.NBTBase;
+import net.minecraft.server.NBTCompressedStreamTools;
+import net.minecraft.server.NBTTagCompound;
+import net.minecraft.server.NBTTagList;
+import org.apache.commons.codec.digest.DigestUtils;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.CraftServer;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.security.MessageDigest;
+import java.security.SecureRandom;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+import java.util.stream.Collectors;
+
+public class CraftHybridEngine implements HybridEngine {
+
+    public static final Logger LOGGER = LogManager.getLogger();
+
+    private final CraftServer server;
+    private final SecureRandom random = new SecureRandom();
+
+    private final File file = new File("hybrid.dat");
+
+    private final Map<String, String> knownNames = new HashMap<>();
+
+    private final Map<UUID, UUID> onlineMapping = new HashMap<>();
+    private final Map<String, UUID> offlineMapping = new HashMap<>();
+
+    private final Map<UUID, byte[]> passwords = new HashMap<>();
+
+    private final Map<UUID, String> authAddresses = new HashMap<>();
+    private final Map<UUID, Long> authExpiration = new HashMap<>();
+
+    /**
+     * Maps hybrid IDs to online IDs
+     */
+    private final Map<UUID, UUID> onlineIds = new HashMap<>();
+
+    /**
+     * Persistent.
+     * Maps hybrid IDs to online IDs allowed to skip authentication
+     */
+    private final Map<UUID, UUID> authOnlineIds = new HashMap<>();
+
+    private final List<HybridPasswordProvider> passwordProviders = new ArrayList<>();
+
+    private final Map<UUID, CraftHybridProfile> profiles = new HashMap<>();
+
+    private final Set<Pair<InetAddress, String>> invalidSessions = new HashSet<>();
+    private final Set<UUID> invalidSessionWorkarounds = new HashSet<>();
+
+    public CraftHybridEngine(CraftServer server) {
+        this.server = server;
+
+        try {
+            load();
+        } catch (IOException e) {
+            LOGGER.error("Error loading hybrid.dat - server stopping", e);
+            server.shutdown();
+        }
+    }
+
+    public CraftServer getServer() {
+        return server;
+    }
+
+    public Logger getLogger() {
+        return LOGGER;
+    }
+
+    public void tick() {
+        for(CraftHybridProfile profile : profiles.values().toArray(new CraftHybridProfile[0])) {
+            if(profile.getPlayer().isOnline()) {
+                if(!profile.isLoggedIn())
+                    profile.tick();
+            } else {
+                profiles.remove(profile.getId());
+                onlineIds.remove(profile.getId());
+            }
+        }
+    }
+
+    private void load() throws IOException {
+        if(!file.isFile())
+            return;
+
+        NBTTagCompound root = NBTCompressedStreamTools.readNBT(new DataInputStream(new FileInputStream(file)));
+
+        knownNames.clear();
+        for(NBTBase base : root.getList("KnownNames", 10)) {
+            NBTTagCompound mapping = (NBTTagCompound) base;
+            knownNames.put(mapping.getString("Key"), mapping.getString("Value"));
+        }
+
+        onlineMapping.clear();
+        for(NBTBase base : root.getList("OnlineMapping", 10)) {
+            NBTTagCompound mapping = (NBTTagCompound) base;
+            onlineMapping.put(mapping.getUUID("Key"), mapping.getUUID("Value"));
+        }
+
+        offlineMapping.clear();
+        for(NBTBase base : root.getList("OfflineMapping", 10)) {
+            NBTTagCompound mapping = (NBTTagCompound) base;
+            offlineMapping.put(mapping.getString("Key"), mapping.getUUID("Value"));
+        }
+
+        passwords.clear();
+        for(NBTBase base : root.getList("Passwords", 10)) {
+            NBTTagCompound mapping = (NBTTagCompound) base;
+            passwords.put(mapping.getUUID("Key"), mapping.getByteArray("Value"));
+        }
+
+        authExpiration.clear();
+        authAddresses.clear();
+        for(NBTBase base : root.getList("AuthExpiration", 10)) {
+            NBTTagCompound mapping = (NBTTagCompound) base;
+            long expiration = mapping.getLong("Expiration");
+
+            if(expiration > System.currentTimeMillis()) {
+                UUID id = mapping.getUUID("Key");
+                authAddresses.put(id, mapping.getString("Address"));
+                authExpiration.put(id, expiration);
+            }
+        }
+
+        authOnlineIds.clear();
+        for(NBTBase base : root.getList("OnlineIds", 10)) {
+            NBTTagCompound mapping = (NBTTagCompound) base;
+            authOnlineIds.put(mapping.getUUID("Key"), mapping.getUUID("Value"));
+        }
+    }
+
+    private void save() {
+        NBTTagCompound root = new NBTTagCompound();
+
+        NBTTagList nbtKnownNames = new NBTTagList();
+        nbtKnownNames.addAll(knownNames.entrySet().stream().map(entry -> {
+            NBTTagCompound nbt = new NBTTagCompound();
+            nbt.setString("Key", entry.getKey());
+            nbt.setString("Value", entry.getValue());
+            return nbt;
+        }).collect(Collectors.toList()));
+        root.set("KnownNames", nbtKnownNames);
+
+        NBTTagList nbtOnlineMapping = new NBTTagList();
+        nbtOnlineMapping.addAll(onlineMapping.entrySet().stream().map(entry -> {
+            NBTTagCompound nbt = new NBTTagCompound();
+            nbt.setUUID("Key", entry.getKey());
+            nbt.setUUID("Value", entry.getValue());
+            return nbt;
+        }).collect(Collectors.toList()));
+        root.set("OnlineMapping", nbtOnlineMapping);
+
+        NBTTagList nbtOfflineMapping = new NBTTagList();
+        nbtOfflineMapping.addAll(offlineMapping.entrySet().stream().map(entry -> {
+            NBTTagCompound nbt = new NBTTagCompound();
+            nbt.setString("Key", entry.getKey());
+            nbt.setUUID("Value", entry.getValue());
+            return nbt;
+        }).collect(Collectors.toList()));
+        root.set("OfflineMapping", nbtOfflineMapping);
+
+        NBTTagList nbtPasswords = new NBTTagList();
+        nbtPasswords.addAll(passwords.entrySet().stream().map(entry -> {
+            NBTTagCompound nbt = new NBTTagCompound();
+            nbt.setUUID("Key", entry.getKey());
+            nbt.setByteArray("Value", entry.getValue());
+            return nbt;
+        }).collect(Collectors.toList()));
+        root.set("Passwords", nbtPasswords);
+
+        NBTTagList nbtAuthExpiration = new NBTTagList();
+        nbtAuthExpiration.addAll(authExpiration.entrySet().stream().map(entry -> {
+            NBTTagCompound nbt = new NBTTagCompound();
+            nbt.setUUID("Key", entry.getKey());
+            nbt.setLong("Expiration", entry.getValue());
+            nbt.setString("Address", authAddresses.get(entry.getKey()));
+            return nbt;
+        }).collect(Collectors.toList()));
+        root.set("AuthExpiration", nbtAuthExpiration);
+
+        NBTTagList nbtOnlineIds = new NBTTagList();
+        nbtOnlineIds.addAll(authOnlineIds.entrySet().stream().map(entry -> {
+            NBTTagCompound nbt = new NBTTagCompound();
+            nbt.setUUID("Key", entry.getKey());
+            nbt.setUUID("Value", entry.getValue());
+            return nbt;
+        }).collect(Collectors.toList()));
+        root.set("OnlineIds", nbtOnlineIds);
+
+        try {
+            NBTCompressedStreamTools.writeNBT(root, new DataOutputStream(new FileOutputStream(file)));
+        } catch (IOException e) {
+            LOGGER.error("Error saving hybrid.dat", e);
+        }
+    }
+
+    public void setOnlineId(UUID id, UUID online) {
+        onlineIds.put(id, online);
+        save();
+    }
+
+    public UUID getIdForOnlinePlayer(GameProfile online) {
+        if(onlineMapping.containsKey(online.getId())) {
+            // We already know this online player, return cached ID
+            return onlineMapping.get(online.getId());
+        }
+
+        // Unknown player: get, save, and return ID
+        // Saving current ID ensures ID will not change if name changes
+        UUID id = getIdForOfflinePlayer(online);
+        LOGGER.info("Saving new mapping for online player " + online.getName());
+        onlineMapping.put(online.getId(), id);
+        save();
+        return id;
+    }
+
+    public UUID getIdForOfflinePlayer(GameProfile offline) {
+        String low = offline.getName().toLowerCase();
+
+        if(!knownNames.containsKey(low)) {
+            knownNames.put(low, offline.getName());
+            save();
+        }
+
+        String name = knownNames.get(low);
+
+        if(!name.equals(offline.getName()))
+            LOGGER.info("Player " + offline.getName() + " previously known as " + name + ", using the latter instead");
+
+        if(offlineMapping.containsKey(name)) {
+            // This player has a forced ID, return it
+            LOGGER.info("Player " + name + " has a forced offline UUID mapping");
+            return offlineMapping.get(name);
+        }
+
+        // No forced ID: returning default offline ID
+        return EntityHuman.getOfflineUUID(name);
+    }
+
+    private byte[] hashPassword(String password) {
+        MessageDigest digest = DigestUtils.getSha256Digest();
+
+        byte[] salt = new byte[16];
+        random.nextBytes(salt);
+        digest.update(salt);
+
+        byte[] hash = new byte[49];
+        hash[0] = 0;
+        System.arraycopy(salt, 0, hash, 1, 16);
+        System.arraycopy(digest.digest(password.getBytes(StandardCharsets.UTF_8)), 0, hash, 17, 32);
+
+        return hash;
+    }
+
+    public void setPassword(UUID id, String password) {
+        passwords.put(id, hashPassword(password));
+        save();
+    }
+
+    public void setAuthExpiration(UUID id, String address, long expiration) {
+        authAddresses.put(id, address);
+        authExpiration.put(id, expiration);
+        save();
+    }
+
+    public AutoLoginReason canSkipAuthentication(UUID id, String address) {
+        if(authExpiration.containsKey(id) && authExpiration.get(id) >= System.currentTimeMillis()
+                && address.equals(authAddresses.get(id))) {
+            return AutoLoginReason.EXPIRATION;
+        } else if(onlineIds.containsKey(id)) { // Online player
+            if(authOnlineIds.containsKey(id)) { // Known online player
+                if(onlineIds.get(id).equals(authOnlineIds.get(id))) { // Known ID match
+                    return AutoLoginReason.ONLINE;
+                }
+            } else if(!isRegistered(id, null)) { // Unknown online player
+                return AutoLoginReason.ONLINE;
+            }
+        }
+
+        return null;
+    }
+
+    public void setKnownOnlineId(UUID id) {
+        if(onlineIds.containsKey(id)) {
+            authOnlineIds.put(id, onlineIds.get(id));
+            save();
+        }
+    }
+
+    public boolean verifyPassword(UUID id, String username, String password) {
+        byte[] hash = passwords.get(id);
+
+        if(hash == null)
+            return username != null && passwordProviders.stream().anyMatch(provider -> provider.verifyPassword(username, password));
+
+        if(hash[0] != 0)
+            return false;
+
+        MessageDigest digest = DigestUtils.getSha256Digest();
+        digest.update(Arrays.copyOfRange(hash, 1, 17));
+        byte[] vHash = digest.digest(password.getBytes(StandardCharsets.UTF_8));
+
+        return Arrays.equals(Arrays.copyOfRange(hash, 17, 49), vHash);
+    }
+
+    public CraftHybridProfile getProfile(UUID id) {
+        if(!profiles.containsKey(id))
+            profiles.put(id, new CraftHybridProfile(this, id));
+
+        return profiles.get(id);
+    }
+
+    boolean isRegistered(UUID id, String username) {
+        return passwords.containsKey(id) || (username != null && passwordProviders.stream().anyMatch(provider -> provider.hasPassword(username)));
+    }
+
+    private InetAddress resolveInetAddress(SocketAddress address) {
+        if(address instanceof InetSocketAddress)
+            return ((InetSocketAddress) address).getAddress();
+
+        return null;
+    }
+
+    public void setInvalidSession(SocketAddress address, String name) {
+        invalidSessions.add(Pair.of(resolveInetAddress(address), name));
+    }
+
+    public boolean hasInvalidSession(SocketAddress address, String name) {
+        return invalidSessions.contains(Pair.of(resolveInetAddress(address), name));
+    }
+
+    public void setInvalidSessionWorkaround(UUID id) {
+        invalidSessionWorkarounds.add(id);
+    }
+
+    public boolean hasInvalidSessionWorkaround(UUID id) {
+        return invalidSessionWorkarounds.contains(id);
+    }
+
+    @Override
+    public UUID getIdForOfflinePlayer(String name) {
+        return getIdForOfflinePlayer(new GameProfile(null, name));
+    }
+
+    @Override
+    public UUID getIdForOnlinePlayer(String name, UUID id) {
+        return getIdForOnlinePlayer(new GameProfile(id, name));
+    }
+
+    @Override
+    public UUID getOfflineMapping(String name) {
+        return offlineMapping.get(name);
+    }
+
+    @Override
+    public void setOfflineMapping(String name, UUID id) {
+        if(id == null)
+            offlineMapping.remove(name);
+        else
+            offlineMapping.put(name, id);
+
+        save();
+    }
+
+    @Override
+    public void registerPasswordProvider(HybridPasswordProvider provider) {
+        passwordProviders.add(provider);
+    }
+
+    @Override
+    public void importKnownNames(Map<String, String> importNames) {
+        knownNames.putAll(importNames);
+        save();
+    }
+
+    public enum AutoLoginReason {
+        EXPIRATION("stayed logged in"),
+        ONLINE("known online ID");
+
+        private String message;
+
+        AutoLoginReason(String message) {
+            this.message = message;
+        }
+
+        @Override
+        public String toString() {
+            return message;
+        }
+
+        public String getMessage() {
+            return PapyrusConfig.hybridAutoLoginMessages.get(this);
+        }
+    }
+}
diff --git a/src/main/java/fr/thekinrar/papyrus/hybrid/CraftHybridProfile.java b/src/main/java/fr/thekinrar/papyrus/hybrid/CraftHybridProfile.java
new file mode 100644
index 000000000..585eb3f27
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/hybrid/CraftHybridProfile.java
@@ -0,0 +1,189 @@
+package fr.thekinrar.papyrus.hybrid;
+
+import fr.thekinrar.papyrus.PapyrusConfig;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.event.entity.EntityPotionEffectEvent;
+import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
+
+import java.net.InetSocketAddress;
+import java.util.UUID;
+
+public class CraftHybridProfile implements HybridProfile {
+
+    private final CraftHybridEngine engine;
+    private final UUID id;
+
+    private CraftPlayer player;
+    private boolean loginRequested, registrationRequested;
+
+    private long ticks;
+    private long startTime;
+
+    private CraftHybridEngine.AutoLoginReason autoLogin;
+
+    CraftHybridProfile(CraftHybridEngine engine, UUID id) {
+        this.engine = engine;
+        this.id = id;
+    }
+
+    public CraftHybridEngine getEngine() {
+        return engine;
+    }
+
+    public UUID getId() {
+        return id;
+    }
+
+    public CraftPlayer getPlayer() {
+        return player;
+    }
+
+    public void authenticate(CraftPlayer player, InetSocketAddress address) {
+        this.player = player;
+
+        autoLogin = address == null ? null : engine.canSkipAuthentication(id, address.getAddress().getHostAddress());
+        if(autoLogin == null) {
+            logout();
+        } else {
+            engine.getLogger().info("Skipping login for " + player.getName() + " (" + autoLogin + ")");
+        }
+    }
+
+    public void logout() {
+        if(PapyrusConfig.hybridEnableAuthentication) {
+            if (isRegistered()) {
+                engine.getLogger().info("Requesting login for " + player.getName());
+                loginRequested = true;
+                registrationRequested = false;
+            } else {
+                engine.getLogger().info("Requesting registration for " + player.getName());
+                registrationRequested = true;
+                loginRequested = false;
+            }
+
+            player.getHandle().unauthenticated = true;
+
+            ticks = -1;
+        }
+    }
+
+    public void connectionReady() {
+        if(autoLogin != null)
+            player.sendMessage(autoLogin.getMessage());
+    }
+
+    public void tick() {
+        ++ticks;
+
+        if(ticks == 0) {
+            startTime = System.currentTimeMillis();
+            engine.getServer().getHandle().updateClient(player.getHandle());
+        } else if(System.currentTimeMillis() - startTime >= PapyrusConfig.hybridAuthTimeout) {
+            engine.getLogger().info(player.getName() + " auth timed out");
+            player.kickPlayer(PapyrusConfig.hybridAuthTimeoutMessage);
+            return;
+        }
+
+        int interval = PapyrusConfig.hybridRequestLoginInterval;
+        if(ticks == 0 || (interval > 0 && ticks % interval == 0))
+            sendUnauthenticatedMessage();
+
+        if(ticks % 20 == 0)
+            addEffect(PotionEffectType.BLINDNESS, 0);
+    }
+
+    private void addEffect(PotionEffectType type, int amplifier) {
+        player.addPotionEffect(
+                new PotionEffect(type, 100, amplifier, false, false, false),
+                true,
+                EntityPotionEffectEvent.Cause.HYBRID_AUTH
+        );
+    }
+
+    private void clearEffects() {
+        player.removePotionEffect(PotionEffectType.BLINDNESS, EntityPotionEffectEvent.Cause.HYBRID_AUTH);
+
+        player.getHandle().lastSentExp = -1;
+        engine.getServer().getServer().getPlayerList().updateClient(player.getHandle());
+
+        if(engine.hasInvalidSessionWorkaround(id))
+            player.sendMessage(PapyrusConfig.hybridInvalidSessionWorkaroundMessage);
+    }
+
+    public void sendUnauthenticatedMessage() {
+        if(loginRequested)
+            player.sendMessage(PapyrusConfig.hybridRequestLoginMessage);
+        else if(registrationRequested)
+            player.sendMessage(PapyrusConfig.hybridRequestRegisterMessage);
+    }
+
+    public void register(String password) {
+        engine.setPassword(id, password);
+
+        registrationRequested = false;
+        player.getHandle().unauthenticated = false;
+
+        clearEffects();
+        engine.setKnownOnlineId(id);
+
+        engine.getLogger().info(player.getName() + " registered");
+    }
+
+    public boolean login(String password) {
+        if(engine.verifyPassword(id, player.getName(), password)) {
+            loginRequested = false;
+            player.getHandle().unauthenticated = false;
+
+            clearEffects();
+            engine.setKnownOnlineId(id);
+
+            engine.getLogger().info(player.getName() + " logged in");
+
+            return true;
+        }
+
+        return false;
+    }
+
+    @Override
+    public boolean isRegistered() {
+        return engine.isRegistered(id, player.getName());
+    }
+
+    @Override
+    public boolean isLoggedIn() {
+        return !player.getHandle().unauthenticated;
+    }
+
+    @Override
+    public void setLoggedIn(boolean loggedIn) {
+        if(isRegistered()) {
+            loginRequested = player.getHandle().unauthenticated = !loggedIn;
+
+            if(!loggedIn) {
+                sendUnauthenticatedMessage();
+
+                ticks = -1;
+            } else {
+                clearEffects();
+            }
+        }
+    }
+
+    @Override
+    public void setPassword(String password) {
+        engine.setPassword(id, password);
+
+        if(registrationRequested) {
+            registrationRequested = false;
+            loginRequested = true;
+            sendUnauthenticatedMessage();
+        }
+    }
+
+    @Override
+    public void stayLoggedIn(long millis) {
+        engine.setAuthExpiration(id, player.getAddress().getAddress().getHostAddress(), System.currentTimeMillis() + millis);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index cd73cde8d..95888e7b5 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -17,9 +17,12 @@ import javax.annotation.Nullable;
 
 // CraftBukkit start
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.util.CraftVector;
 import org.bukkit.entity.Item;
 import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.player.PlayerBedLeaveEvent;
@@ -86,6 +89,10 @@ public abstract class EntityHuman extends EntityLiving {
     }
     // CraftBukkit end
 
+    // Papyrus start
+    public boolean unauthenticated = false;
+    // Papyrus end
+
     public EntityHuman(World world, GameProfile gameprofile) {
         super(EntityTypes.PLAYER, world);
         this.bY = ItemStack.a;
@@ -593,10 +600,7 @@ public abstract class EntityHuman extends EntityLiving {
             Player player = (Player) this.getBukkitEntity();
             Item drop = (Item) entityitem.getBukkitEntity();
 
-            PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
-            this.world.getServer().getPluginManager().callEvent(event);
-
-            if (event.isCancelled()) {
+            if (hybridCall(new PlayerDropItemEvent(player, drop))) {
                 org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
                 if (flag1 && (cur == null || cur.getAmount() == 0)) {
                     // The complete stack was dropped
@@ -623,6 +627,14 @@ public abstract class EntityHuman extends EntityLiving {
         }
     }
 
+    public boolean hybridCall(Event event) {
+        if(unauthenticated)
+            return true;
+
+        this.world.getServer().getPluginManager().callEvent(event);
+        return event instanceof Cancellable && ((Cancellable) event).isCancelled();
+    }
+
     public float b(IBlockData iblockdata) {
         float f = this.inventory.a(iblockdata);
 
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index addbafe66..813fffc81 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -860,9 +860,11 @@ public abstract class EntityLiving extends Entity {
                 override = new MobEffect(mobeffect1).a(mobeffect);
             }
 
-            EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffect1, mobeffect, cause, override);
-            if (event.isCancelled()) {
-                return false;
+            if(!cause.equals(EntityPotionEffectEvent.Cause.HYBRID_AUTH)) { // Papyrus
+                EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffect1, mobeffect, cause, override);
+                if (event.isCancelled()) {
+                    return false;
+                }
             }
             // CraftBukkit end
 
@@ -871,7 +873,7 @@ public abstract class EntityLiving extends Entity {
                 this.a(mobeffect);
                 return true;
                 // CraftBukkit start
-            } else if (event.isOverride()) {
+            } else if (override) { // Papyrus - read override directly
                 mobeffect1.a(mobeffect);
                 this.a(mobeffect1, true);
                 // CraftBukkit end
@@ -916,9 +918,11 @@ public abstract class EntityLiving extends Entity {
             return null;
         }
 
-        EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause);
-        if (event.isCancelled()) {
-            return null;
+        if(!cause.equals(EntityPotionEffectEvent.Cause.HYBRID_AUTH)) {
+            EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause);
+            if (event.isCancelled()) {
+                return null;
+            }
         }
 
         return (MobEffect) this.effects.remove(mobeffectlist);
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index c747b5deb..db209a240 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -25,6 +25,8 @@ import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.event.player.PlayerChangedMainHandEvent;
 import org.bukkit.event.player.PlayerChangedWorldEvent;
@@ -483,7 +485,12 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
             if (this.expTotal != this.lastSentExp) {
                 this.lastSentExp = this.expTotal;
+
+                if(this.unauthenticated) {
+                this.playerConnection.sendPacket(new PacketPlayOutExperience(0, 0, 0));
+                } else {
                 this.playerConnection.sendPacket(new PacketPlayOutExperience(this.exp, this.expTotal, this.expLevel));
+                }
             }
 
             if (this.ticksLived % 20 == 0) {
@@ -1962,4 +1969,14 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         return (CraftPlayer) super.getBukkitEntity();
     }
     // CraftBukkit end
+
+    @Override
+    public boolean hybridCall(Event event) {
+        if(super.hybridCall(event)) {
+            getBukkitEntity().getHybridProfile().sendUnauthenticatedMessage();
+            return true;
+        }
+
+        return false;
+    }
 }
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
index a8773037e..f71e0acb0 100644
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -4,13 +4,17 @@ import com.destroystokyo.paper.profile.CraftPlayerProfile;
 import com.destroystokyo.paper.profile.PlayerProfile;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
-import io.netty.channel.ChannelFuture;
+import com.mojang.authlib.properties.Property;
+import fr.thekinrar.papyrus.PapyrusConfig;
+import fr.thekinrar.papyrus.hybrid.CraftHybridEngine;
+
 import java.math.BigInteger;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.security.PrivateKey;
 import java.util.Arrays;
+import java.util.Map;
 import java.util.Random;
 import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -34,6 +38,7 @@ public class LoginListener implements PacketLoginInListener {
     private static final Random random = new Random();
     private final byte[] e = new byte[4];
     private final MinecraftServer server;
+    private final CraftHybridEngine hybridEngine;
     public final NetworkManager networkManager;
     private LoginListener.EnumProtocolState g; public final LoginListener.EnumProtocolState getLoginState() { return this.g; }; // Paper - OBFHELPER
     private int h;
@@ -43,11 +48,13 @@ public class LoginListener implements PacketLoginInListener {
     private EntityPlayer l;
     public String hostname = ""; // CraftBukkit - add field
     private int velocityLoginMessageId = -1; // Paper - Velocity support
+    private boolean invalidSession;
 
     public LoginListener(MinecraftServer minecraftserver, NetworkManager networkmanager) {
         this.g = LoginListener.EnumProtocolState.HELLO;
         this.j = "";
         this.server = minecraftserver;
+        this.hybridEngine = minecraftserver.server.getHybridEngine();
         this.networkManager = networkmanager;
         LoginListener.random.nextBytes(this.e);
     }
@@ -120,6 +127,12 @@ public class LoginListener implements PacketLoginInListener {
     // Spigot start
     public void initUUID()
     {
+        if(Bukkit.getHybridMode()) {
+            this.i = new GameProfile(hybridEngine.getIdForOfflinePlayer(this.i), this.i.getName());
+
+            if(invalidSession)
+                hybridEngine.setInvalidSessionWorkaround(i.getId());
+        } else {
         UUID uuid;
         if ( networkManager.spoofedUUID != null )
         {
@@ -130,6 +143,7 @@ public class LoginListener implements PacketLoginInListener {
         }
 
         this.i = new GameProfile( uuid, this.i.getName() );
+        }
 
         if (networkManager.spoofedProfile != null)
         {
@@ -190,7 +204,20 @@ public class LoginListener implements PacketLoginInListener {
     public void a(PacketLoginInStart packetlogininstart) {
         Validate.validState(this.g == LoginListener.EnumProtocolState.HELLO, "Unexpected hello packet", new Object[0]);
         this.i = packetlogininstart.b();
-        if (this.server.getOnlineMode() && !this.networkManager.isLocal()) {
+
+        boolean encryption = this.server.getOnlineMode();
+        if(!encryption && this.server.server.getHybridMode()) {
+            if(PapyrusConfig.hybridOfflineOnlyHosts.contains(this.networkManager.virtualHost.getHostString())) {
+                hybridEngine.getLogger().info("Forcing offline mode for player " + getGameProfile().getName() + " (offline host: " + this.networkManager.virtualHost.getHostString() + ")");
+            } else if(hybridEngine.hasInvalidSession(networkManager.getSocketAddress(), getGameProfile().getName())) {
+                hybridEngine.getLogger().info("Forcing offline mode for player " + getGameProfile().getName() + " (invalid session)");
+                invalidSession = true;
+            } else {
+                encryption = true;
+            }
+        }
+
+        if (encryption) {
             this.g = LoginListener.EnumProtocolState.KEY;
             this.networkManager.sendPacket(new PacketLoginOutEncryptionBegin("", this.server.getKeyPair().getPublic(), this.e));
         } else {
@@ -209,6 +236,12 @@ public class LoginListener implements PacketLoginInListener {
                 public void run() {
                     try {
                         initUUID();
+
+                        if(Bukkit.getHybridMode()) {
+                            hybridEngine.getLogger().info("Player " + i.getName() + " is offline");
+                            hybridEngine.getLogger().info("UUID of player " + i.getName() + " is " + i.getId());
+                        }
+
                         new LoginHandler().fireEvents();
                     } catch (Exception ex) {
                         disconnect("Failed to verify username!");
@@ -248,7 +281,32 @@ public class LoginListener implements PacketLoginInListener {
                                 return;
                             }
 
+                            // Papyrus start
+                            if(Bukkit.getHybridMode()) {
+                                GameProfile onlineProfile = LoginListener.this.i;
+                                UUID id = hybridEngine.getIdForOnlinePlayer(onlineProfile);
+                                hybridEngine.setOnlineId(id, onlineProfile.getId());
+
+                                hybridEngine.getLogger().info("Player " + onlineProfile.getName() + " is online with UUID " + onlineProfile.getId());
+                                hybridEngine.getLogger().info("UUID of player " + onlineProfile.getName() + " is " + id);
+
+                                LoginListener.this.i = new GameProfile(id, onlineProfile.getName());
+                                for(Map.Entry<String, Property> e : onlineProfile.getProperties().entries()) {
+                                    LoginListener.this.i.getProperties().put(e.getKey(), e.getValue());
+                                }
+                            }
+                            // Papyrus end
+
                             new LoginHandler().fireEvents();
+                        } else if (Bukkit.getHybridMode()) { // Papyrus start
+                            UUID id = hybridEngine.getIdForOfflinePlayer(gameprofile);
+
+                            hybridEngine.getLogger().info("Player " + gameprofile.getName() + " is offline");
+                            hybridEngine.getLogger().info("UUID of player " + gameprofile.getName() + " is " + id);
+
+                            LoginListener.this.i = new GameProfile(id, gameprofile.getName());
+                            LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+                            // Papyrus end
                         } else if (LoginListener.this.server.isEmbeddedServer()) {
                             LoginListener.LOGGER.warn("Failed to verify username but will let them in anyway!");
                             LoginListener.this.i = LoginListener.this.a(gameprofile);
@@ -340,7 +398,10 @@ public class LoginListener implements PacketLoginInListener {
                                 }
                             }
                             // CraftBukkit end
-                            LoginListener.LOGGER.info("UUID of player {} is {}", LoginListener.this.i.getName(), LoginListener.this.i.getId());
+
+                            if(!Bukkit.getHybridMode()) // Papyrus
+                                LoginListener.LOGGER.info("UUID of player {} is {}", LoginListener.this.i.getName(), LoginListener.this.i.getId());
+
                             LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
                 }
         }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 4f07ec1ec..c166a9358 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1177,6 +1177,14 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.methodProfiler.exitEnter("levels");
         Iterator iterator = this.getWorlds().iterator();
 
+        // Papyrus start
+        if(server.getHybridMode()) {
+            MinecraftTimings.hybridEngineTimer.startTiming();
+            this.server.getHybridEngine().tick();
+            MinecraftTimings.hybridEngineTimer.stopTiming();
+        }
+        // Papyrus end
+
         // CraftBukkit start
         // Run tasks that are waiting on processing
         MinecraftTimings.processQueueTimer.startTiming(); // Spigot
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 96a785af2..715707316 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.collect.Queues;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import fr.thekinrar.papyrus.hybrid.CraftHybridEngine;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
@@ -25,6 +26,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
+import org.bukkit.Bukkit;
 
 public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 
@@ -373,6 +375,15 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
                             final com.mojang.authlib.GameProfile profile = loginListener.getGameProfile(); /* Should be non-null at this stage */
                             new com.destroystokyo.paper.event.player.PlayerConnectionCloseEvent(profile.getId(), profile.getName(),
                                 ((java.net.InetSocketAddress)socketAddress).getAddress(), false).callEvent();
+                            // Papyrus start
+                            break;
+                        case KEY:
+                            if(Bukkit.getHybridMode()) {
+                                CraftHybridEngine engine = MinecraftServer.getServer().server.getHybridEngine();
+                                engine.getLogger().info("Player " + loginListener.getGameProfile().getName() + " seems to have invalid session");
+                                engine.setInvalidSession(this.getSocketAddress(), loginListener.getGameProfile().getName());
+                            }
+                            // Papyrus end
                     }
                 }
                 // Paper end
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 9c0050b57..00b2b19de 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -7,6 +7,7 @@ import com.google.common.primitives.Floats;
 import com.mojang.brigadier.ParseResults;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.suggestion.Suggestions;
+import fr.thekinrar.papyrus.hybrid.CraftHybridEngine;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import it.unimi.dsi.fastutil.ints.Int2ShortMap;
@@ -1013,6 +1014,13 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             }
                             // Paper end
 
+                            // Papyrus start - Hybrid mode
+                            if(player.unauthenticated) {
+                                this.internalTeleport(this.player.locX, this.player.locY, this.player.locZ, this.player.yaw, this.player.pitch, Collections.emptySet());
+                                return;
+                            }
+                            // Papyrus end
+
                             if (!this.player.H() && (!this.player.getWorldServer().getGameRules().getBoolean(GameRules.DISABLE_ELYTRA_MOVEMENT_CHECK) || !this.player.isGliding())) {
                                 float f2 = this.player.isGliding() ? 300.0F : 100.0F;
 
@@ -1267,6 +1275,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
         switch (packetplayinblockdig_enumplayerdigtype) {
             case SWAP_HELD_ITEMS:
+                if(player.unauthenticated) return; // Papyrus
+
                 if (!this.player.isSpectator()) {
                     ItemStack itemstack = this.player.b(EnumHand.OFF_HAND);
 
@@ -1293,6 +1303,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
                 return;
             case DROP_ITEM:
+                if(player.unauthenticated) return; // Papyrus
+
                 if (!this.player.isSpectator()) {
                     // limit how quickly items can be dropped
                     // If the ticks aren't the same then the count starts from 0 and we update the lastDropTick.
@@ -1314,12 +1326,16 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
                 return;
             case DROP_ALL_ITEMS:
+                if(player.unauthenticated) return; // Papyrus
+
                 if (!this.player.isSpectator()) {
                     this.player.n(true);
                 }
 
                 return;
             case RELEASE_USE_ITEM:
+                if(player.unauthenticated) return; // Papyrus
+
                 this.player.clearActiveItem();
                 return;
             case START_DESTROY_BLOCK:
@@ -1631,6 +1647,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 }
             }
 
+            if(player.unauthenticated && !isSync) {
+                CraftHybridEngine.LOGGER.warn(player.getName() + " tried chatting while unauthenticated: " + s);
+                getPlayer().getHybridProfile().sendUnauthenticatedMessage();
+                return;
+            }
+
             // CraftBukkit start
             if (isSync) {
                 try {
@@ -1814,7 +1836,12 @@ public class PlayerConnection implements PacketListenerPlayIn {
         MinecraftTimings.playerCommandTimer.startTiming(); // Paper
         // CraftBukkit start - whole method
         if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
-        this.LOGGER.info(this.player.getName() + " issued server command: " + s);
+        {
+            if(player.unauthenticated)
+                this.LOGGER.info(this.player.getName() + " issued server command: " + s.split(" ")[0] + " ...");
+            else
+                this.LOGGER.info(this.player.getName() + " issued server command: " + s);
+        }
 
         CraftPlayer player = this.getPlayer();
 
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index a25b511b9..b8290be65 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -5,8 +5,10 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
+import fr.thekinrar.papyrus.PapyrusConfig;
 import io.netty.buffer.Unpooled;
 import java.io.File;
+import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.text.SimpleDateFormat;
 import java.util.Collection;
@@ -110,6 +112,13 @@ public abstract class PlayerList {
         }
         // CraftBukkit end
 
+        // Papyrus start
+        if(cserver.getHybridMode()) {
+            SocketAddress address = networkmanager.getSocketAddress();
+            entityplayer.getBukkitEntity().initHybridProfile(address instanceof InetSocketAddress ? (InetSocketAddress) address : null);
+        }
+        // Papyrus end
+
         // Paper start - support PlayerInitialSpawnEvent
         Location originalLoc = new Location(entityplayer.world.getWorld(), entityplayer.locX, entityplayer.locY, entityplayer.locZ, entityplayer.yaw, entityplayer.pitch);
         com.destroystokyo.paper.event.player.PlayerInitialSpawnEvent event = new com.destroystokyo.paper.event.player.PlayerInitialSpawnEvent(entityplayer.getBukkitEntity(), originalLoc);
@@ -155,7 +164,7 @@ public abstract class PlayerList {
 
         // CraftBukkit - getType()
         // Spigot - view distance
-        playerconnection.sendPacket(new PacketPlayOutLogin(entityplayer.getId(), entityplayer.playerInteractManager.getGameMode(), worlddata.isHardcore(), worldserver.worldProvider.getDimensionManager().getType(), this.getMaxPlayers(), worlddata.getType(), worldserver.spigotConfig.viewDistance, worldserver.getGameRules().getBoolean(GameRules.REDUCED_DEBUG_INFO)));
+        playerconnection.sendPacket(new PacketPlayOutLogin(entityplayer.getId(), entityplayer.playerInteractManager.getGameMode(), worlddata.isHardcore(), worldserver.worldProvider.getDimensionManager().getType(), this.getMaxPlayers(), worlddata.getType(), worldserver.spigotConfig.viewDistance, hasReducedDebugInfo(entityplayer)));
         entityplayer.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
         playerconnection.sendPacket(new PacketPlayOutCustomPayload(PacketPlayOutCustomPayload.a, (new PacketDataSerializer(Unpooled.buffer())).a(this.getServer().getServerModName())));
         playerconnection.sendPacket(new PacketPlayOutServerDifficulty(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
@@ -163,7 +172,7 @@ public abstract class PlayerList {
         playerconnection.sendPacket(new PacketPlayOutHeldItemSlot(entityplayer.inventory.itemInHandIndex));
         playerconnection.sendPacket(new PacketPlayOutRecipeUpdate(this.server.getCraftingManager().b()));
         playerconnection.sendPacket(new PacketPlayOutTags(this.server.getTagRegistry()));
-        playerconnection.sendPacket(new PacketPlayOutEntityStatus(entityplayer, (byte) (worldserver.getGameRules().getBoolean(GameRules.REDUCED_DEBUG_INFO) ? 22 : 23))); // Paper - fix this rule not being initialized on the client
+        playerconnection.sendPacket(new PacketPlayOutEntityStatus(entityplayer, (byte) (hasReducedDebugInfo(entityplayer) ? 22 : 23))); // Paper - fix this rule not being initialized on the client
         this.d(entityplayer);
         entityplayer.getStatisticManager().c();
         entityplayer.B().a(entityplayer);
@@ -294,6 +303,10 @@ public abstract class PlayerList {
             scoreboard.addPlayerToTeam(entityplayer.getName(), collideRuleTeam);
         }
         // Paper end
+        // Papyrus start
+        if(cserver.getHybridMode())
+            entityplayer.getBukkitEntity().getHybridProfile().connectionReady();
+        // Papyrus end
         // CraftBukkit - Moved from above, added world
         PlayerList.LOGGER.info("{}[{}] logged in with entity id {} at ([{}]{}, {}, {})", entityplayer.getDisplayName().getString(), s1, entityplayer.getId(), entityplayer.world.worldData.getName(), entityplayer.locX, entityplayer.locY, entityplayer.locZ);
     }
@@ -491,6 +504,11 @@ public abstract class PlayerList {
         for (int i = 0; i < this.players.size(); ++i) {
             entityplayer = (EntityPlayer) this.players.get(i);
             if (entityplayer.getUniqueID().equals(uuid)) {
+                if(cserver.getHybridMode()) {
+                    loginlistener.disconnect(PapyrusConfig.hybridDuplicateNameMessage);
+                    return null;
+                }
+
                 list.add(entityplayer);
             }
         }
@@ -1031,15 +1049,30 @@ public abstract class PlayerList {
     }
 
     public void updateClient(EntityPlayer entityplayer) {
-        entityplayer.updateInventory(entityplayer.defaultContainer);
+        // Papyrus start
+        if(entityplayer.unauthenticated)
+            entityplayer.updateInventory(new ContainerPlayer(new PlayerInventory(entityplayer), true, entityplayer));
+        else // Papyrus end
+            entityplayer.updateInventory(entityplayer.defaultContainer);
         // entityplayer.triggerHealthUpdate();
         entityplayer.getBukkitEntity().updateScaledHealth(); // CraftBukkit - Update scaled health on respawn and worldchange
         entityplayer.playerConnection.sendPacket(new PacketPlayOutHeldItemSlot(entityplayer.inventory.itemInHandIndex));
+
+        updateReducedDebugInfo(entityplayer); // Papyrus
+    }
+
+    // Papyrus start
+    public void updateReducedDebugInfo(EntityPlayer entityplayer) {
         // CraftBukkit start - from GameRules
-        int i = entityplayer.world.getGameRules().getBoolean(GameRules.REDUCED_DEBUG_INFO) ? 22 : 23;
+        int i = hasReducedDebugInfo(entityplayer) ? 22 : 23;
         entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityStatus(entityplayer, (byte) i));
         // CraftBukkit end
     }
+    // Papyrus end
+
+    private boolean hasReducedDebugInfo(EntityPlayer entityplayer) {
+        return entityplayer.world.getGameRules().getBoolean(GameRules.REDUCED_DEBUG_INFO) || entityplayer.unauthenticated;
+    }
 
     public int getPlayerCount() {
         return this.players.size();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 623adca03..e6bf6c068 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -14,6 +14,9 @@ import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.LiteralCommandNode;
+import fr.thekinrar.papyrus.hybrid.CraftHybridEngine;
+import fr.thekinrar.papyrus.PapyrusConfig;
+import fr.thekinrar.papyrus.PapyrusPermissions;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
@@ -190,6 +193,7 @@ import org.bukkit.potion.PotionEffectType;
 import org.bukkit.scheduler.BukkitWorker;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.spigotmc.SpigotConfig;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
@@ -236,6 +240,7 @@ public final class CraftServer implements Server {
     private final List<CraftPlayer> playerView;
     public int reloadCount;
     public static Exception excessiveVelEx; // Paper - Velocity warnings
+    private CraftHybridEngine hybridEngine;
 
     static {
         ConfigurationSerialization.registerClass(CraftOfflinePlayer.class);
@@ -347,6 +352,11 @@ public final class CraftServer implements Server {
     }
 
     public void loadPlugins() {
+        // Papyrus start
+        if(getHybridMode())
+            hybridEngine = new CraftHybridEngine(this);
+        // Papyrus end
+
         pluginManager.registerInterface(JavaPluginLoader.class);
 
         File pluginFolder = (File) console.options.valueOf("plugins");
@@ -391,6 +401,7 @@ public final class CraftServer implements Server {
             commandMap.registerServerAliases();
             DefaultPermissions.registerCorePermissions();
             CraftDefaultPermissions.registerCorePermissions();
+            PapyrusPermissions.registerPermissions(); // Papyrus
             if (!com.destroystokyo.paper.PaperConfig.loadPermsBeforePlugins) loadCustomPermissions(); // Paper
             helpMap.initializeCommands();
             syncCommands();
@@ -828,6 +839,7 @@ public final class CraftServer implements Server {
         reloadData();
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         com.destroystokyo.paper.PaperConfig.registerCommands(); // Paper
+        fr.thekinrar.papyrus.PapyrusConfig.registerCommands(); // Papyrus
         overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
         ignoreVanillaPermissions = commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
@@ -2168,4 +2180,26 @@ public final class CraftServer implements Server {
         return net.minecraft.server.MinecraftServer.currentTick;
     }
     // Paper end
+
+    // Papyrus start
+    @Override
+    public CraftHybridEngine getHybridEngine() {
+        return hybridEngine;
+    }
+
+    @Override
+    public boolean getHybridMode() {
+        if (PapyrusConfig.hybridMode) {
+            if (getOnlineMode()) {
+                getLogger().warning("Hybrid mode enabled but server is in online mode. Disabling hybrid mode.");
+                PapyrusConfig.hybridMode = false;
+            } else if(SpigotConfig.bungee) {
+                getLogger().warning("Hybrid mode enabled but bungee support is enabled. Disabling hybrid mode.");
+                PapyrusConfig.hybridMode = false;
+            }
+        }
+
+        return PapyrusConfig.hybridMode;
+    }
+    // Papyrus end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java b/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java
index 2fd69c0f9..119602875 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java
@@ -1,9 +1,13 @@
 package org.bukkit.craftbukkit.command;
 
 import java.util.Map;
+
+import fr.thekinrar.papyrus.hybrid.CraftHybridEngine;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
 import org.bukkit.command.SimpleCommandMap;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 
 public class CraftCommandMap extends SimpleCommandMap {
 
@@ -14,4 +18,19 @@ public class CraftCommandMap extends SimpleCommandMap {
     public Map<String, Command> getKnownCommands() {
         return knownCommands;
     }
+
+    @Override
+    protected boolean hybridExecute(Command command, CommandSender sender, String commandLabel, String[] args) {
+        if(sender instanceof CraftPlayer) {
+            CraftPlayer player = (CraftPlayer) sender;
+
+            if(player.getHandle().unauthenticated && !command.isUnauthenticated()) {
+                CraftHybridEngine.LOGGER.warn(player.getName() + " tried issuing server command while unauthenticated");
+                player.getHybridProfile().sendUnauthenticatedMessage();
+                return true;
+            }
+        }
+
+        return super.hybridExecute(command, sender, commandLabel, args);
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index b27fd44dc..fe868e45c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -383,13 +383,17 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
 
     @Override
     public boolean addPotionEffect(PotionEffect effect, boolean force) {
+        return addPotionEffect(effect, force, EntityPotionEffectEvent.Cause.PLUGIN);
+    }
+
+    public boolean addPotionEffect(PotionEffect effect, boolean force, EntityPotionEffectEvent.Cause cause) {
         if (hasPotionEffect(effect.getType())) {
             if (!force) {
                 return false;
             }
             removePotionEffect(effect.getType());
         }
-        getHandle().addEffect(new MobEffect(MobEffectList.fromId(effect.getType().getId()), effect.getDuration(), effect.getAmplifier(), effect.isAmbient(), effect.hasParticles()), EntityPotionEffectEvent.Cause.PLUGIN);
+        getHandle().addEffect(new MobEffect(MobEffectList.fromId(effect.getType().getId()), effect.getDuration(), effect.getAmplifier(), effect.isAmbient(), effect.hasParticles()), cause);
         return true;
     }
 
@@ -418,6 +422,10 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         getHandle().removeEffect(MobEffectList.fromId(type.getId()), EntityPotionEffectEvent.Cause.PLUGIN);
     }
 
+    public void removePotionEffect(PotionEffectType type, EntityPotionEffectEvent.Cause cause) {
+        getHandle().removeEffect(MobEffectList.fromId(type.getId()), cause);
+    }
+
     @Override
     public Collection<PotionEffect> getActivePotionEffects() {
         List<PotionEffect> effects = new ArrayList<PotionEffect>();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index b183b540b..c3ec6a303 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -7,6 +7,8 @@ import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.io.BaseEncoding;
 import com.mojang.authlib.GameProfile;
+import fr.thekinrar.papyrus.hybrid.CraftHybridProfile;
+import fr.thekinrar.papyrus.hybrid.HybridProfile;
 import io.netty.buffer.Unpooled;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -64,7 +66,6 @@ import net.minecraft.server.PacketPlayOutWorldEvent;
 import net.minecraft.server.PacketPlayOutWorldParticles;
 import net.minecraft.server.PlayerChunkMap;
 import net.minecraft.server.PlayerConnection;
-import net.minecraft.server.PlayerList;
 import net.minecraft.server.TileEntitySign;
 import net.minecraft.server.Vec3D;
 import net.minecraft.server.WhiteListEntry;
@@ -145,6 +146,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private long lastSaveTime;
     // Paper end
     private boolean canAlwaysOpenCommandBlocks = false; // Papyrus
+    private CraftHybridProfile hybridProfile;
 
     public CraftPlayer(CraftServer server, EntityPlayer entity) {
         super(server, entity);
@@ -2010,6 +2012,18 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         MinecraftServer.getServer().getPlayerList().d(getHandle());
     }
+
+    @Override
+    public CraftHybridProfile getHybridProfile() {
+        return hybridProfile;
+    }
+
+    public void initHybridProfile(InetSocketAddress address) {
+        if(hybridProfile == null) {
+            hybridProfile = server.getHybridEngine().getProfile(getUniqueId());
+            hybridProfile.authenticate(this, address);
+        }
+    }
     // Papyrus end
 
     // Spigot start
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index d476e1878..e37723167 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -11,6 +11,8 @@ import java.util.EnumMap;
 import java.util.List;
 import java.util.Map;
 import javax.annotation.Nullable;
+
+import fr.thekinrar.papyrus.hybrid.CraftHybridProfile;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.BlockPropertyInstrument;
 import net.minecraft.server.ChatMessage;
@@ -451,7 +453,13 @@ public class CraftEventFactory {
         if (cancelledBlock) {
             event.setUseInteractedBlock(Event.Result.DENY);
         }
-        craftServer.getPluginManager().callEvent(event);
+
+        if(who != null && who.unauthenticated) {
+            ((CraftHybridProfile)player.getHybridProfile()).sendUnauthenticatedMessage();
+            event.setCancelled(true);
+        } else {
+            craftServer.getPluginManager().callEvent(event);
+        }
 
         return event;
     }
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index d6f1d5785..2dc1da5cb 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -6,8 +6,10 @@
                 <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level]: [%logger] %minecraftFormatting{%msg}%n%xEx}">
                     <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
                     <!-- Disable prefix for various plugins that bypass the plugin logger -->
-                    <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE,fr.thekinrar.papyrus."
+                    <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
                                   pattern="%highlightError{[%d{HH:mm:ss} %level]: %minecraftFormatting{%msg}%n%xEx}" />
+                    <PatternMatch key=",fr.thekinrar.papyrus.hybrid."
+                                  pattern="%highlightError{[%d{HH:mm:ss} %level]: Hybrid mode: %minecraftFormatting{%msg}%n%xEx}" />
                 </LoggerNamePatternSelector>
             </PatternLayout>
         </TerminalConsole>
@@ -16,8 +18,10 @@
                 <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level]: [%logger] %minecraftFormatting{%msg}{strip}%n">
                     <!-- Log root, Minecraft, Mojang and Bukkit loggers without prefix -->
                     <!-- Disable prefix for various plugins that bypass the plugin logger -->
-                    <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE,fr.thekinrar.papyrus."
+                    <PatternMatch key=",net.minecraft.,Minecraft,com.mojang.,com.sk89q.,ru.tehkode.,Minecraft.AWE"
                                   pattern="[%d{HH:mm:ss}] [%t/%level]: %minecraftFormatting{%msg}{strip}%n" />
+                    <PatternMatch key=",fr.thekinrar.papyrus.hybrid."
+                                  pattern="%highlightError{[%d{HH:mm:ss} %level]: Hybrid mode: %minecraftFormatting{%msg}%n%xEx}" />
                 </LoggerNamePatternSelector>
             </PatternLayout>
             <Policies>
-- 
2.24.1

