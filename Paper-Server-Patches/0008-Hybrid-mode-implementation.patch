From 03bc0f4e953d349c609dcf501db9ab7171f5e00a Mon Sep 17 00:00:00 2001
From: Indhi Rousseau <contact@thekinrar.fr>
Date: Sun, 3 Nov 2019 16:08:17 +0000
Subject: [PATCH] Hybrid mode implementation


diff --git a/src/main/java/co/aikar/timings/MinecraftTimings.java b/src/main/java/co/aikar/timings/MinecraftTimings.java
index dd07223978..a5a166b38d 100644
--- a/src/main/java/co/aikar/timings/MinecraftTimings.java
+++ b/src/main/java/co/aikar/timings/MinecraftTimings.java
@@ -43,6 +43,8 @@ public final class MinecraftTimings {
     public static final Timing antiXrayUpdateTimer = Timings.ofSafe("anti-xray - update");
     public static final Timing antiXrayObfuscateTimer = Timings.ofSafe("anti-xray - obfuscate");
 
+    public static final Timing hybridEngineTimer = Timings.ofSafe("Hybrid Engine");
+
     private static final Map<Class<?>, String> taskNameCache = new MapMaker().weakKeys().makeMap();
 
     private MinecraftTimings() {}
diff --git a/src/main/java/fr/thekinrar/papyrus/Metrics.java b/src/main/java/fr/thekinrar/papyrus/Metrics.java
index 7c284c9b2f..ff7346e595 100644
--- a/src/main/java/fr/thekinrar/papyrus/Metrics.java
+++ b/src/main/java/fr/thekinrar/papyrus/Metrics.java
@@ -593,7 +593,7 @@ public class Metrics {
                 }));
 
                 metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
-                metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : "offline"));
+                metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : (Bukkit.getHybridMode() ? "hybrid" : "offline")));
                 metrics.addCustomChart(new Metrics.SimplePie("papyrus_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown"));
 
                 metrics.addCustomChart(new Metrics.DrilldownPie("java_version", () -> {
diff --git a/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java b/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java
index 4168eafc0d..90d8a45b39 100644
--- a/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java
+++ b/src/main/java/fr/thekinrar/papyrus/PapyrusConfig.java
@@ -1,34 +1,24 @@
 package fr.thekinrar.papyrus;
 
-import co.aikar.timings.Timings;
-import co.aikar.timings.TimingsManager;
-import com.destroystokyo.paper.PaperCommand;
-import com.destroystokyo.paper.io.chunk.ChunkTaskManager;
-import com.google.common.base.Strings;
 import com.google.common.base.Throwables;
-import com.google.common.collect.Lists;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
-import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
-import org.spigotmc.SpigotConfig;
-import org.spigotmc.WatchdogThread;
 
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
-import java.nio.charset.StandardCharsets;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
-import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 public class PapyrusConfig {
@@ -190,4 +180,9 @@ public class PapyrusConfig {
         config.addDefault(path, def);
         return config.getString(path, config.getString(path));
     }
+
+    public static boolean hybridMode = false;
+    private static void hybridMode() {
+        hybridMode = getBoolean("settings.hybrid-mode", false);
+    }
 }
diff --git a/src/main/java/fr/thekinrar/papyrus/PapyrusPermissions.java b/src/main/java/fr/thekinrar/papyrus/PapyrusPermissions.java
new file mode 100644
index 0000000000..8d1cd1c5c1
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/PapyrusPermissions.java
@@ -0,0 +1,13 @@
+package fr.thekinrar.papyrus;
+
+import org.bukkit.permissions.Permission;
+import org.bukkit.util.permissions.DefaultPermissions;
+
+public final class PapyrusPermissions {
+    private static final String ROOT= "papyrus.command";
+
+    public static void registerPermissions() {
+        Permission parent = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all Papyrus commands");
+        parent.recalculatePermissibles();
+    }
+}
diff --git a/src/main/java/fr/thekinrar/papyrus/hybrid/HybridPlayer.java b/src/main/java/fr/thekinrar/papyrus/hybrid/HybridPlayer.java
new file mode 100644
index 0000000000..a46fefcd95
--- /dev/null
+++ b/src/main/java/fr/thekinrar/papyrus/hybrid/HybridPlayer.java
@@ -0,0 +1,46 @@
+package fr.thekinrar.papyrus.hybrid;
+
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.event.entity.EntityPotionEffectEvent;
+import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
+
+public class HybridPlayer {
+
+    private final CraftPlayer player;
+    private final CraftServer server;
+
+    private int ticks = -1;
+
+    public HybridPlayer(CraftPlayer player) {
+        this.player = player;
+        this.server = player.getHandle().server.server;
+    }
+
+    public void tick() {
+        ++ticks;
+
+        if(ticks == 0) {
+            server.getHandle().updateClient(player.getHandle());
+        }
+
+        if(ticks % 20 == 0)
+            addEffect(PotionEffectType.BLINDNESS, 0);
+    }
+
+    private void addEffect(PotionEffectType type, int amplifier) {
+        player.addPotionEffect(
+                new PotionEffect(type, 100, amplifier, false, false, false),
+                true,
+                EntityPotionEffectEvent.Cause.HYBRID_AUTH
+        );
+    }
+
+    public void clearEffects() {
+        player.removePotionEffect(PotionEffectType.BLINDNESS, EntityPotionEffectEvent.Cause.HYBRID_AUTH);
+
+        player.getHandle().lastSentExp = -1;
+        server.getHandle().updateClient(player.getHandle());
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index 7df24be46e..5ce855705a 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -16,10 +16,14 @@ import java.util.function.Predicate;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
+import fr.thekinrar.papyrus.PapyrusConfig;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.util.CraftVector;
 import org.bukkit.entity.Item;
 import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.player.PlayerBedLeaveEvent;
@@ -86,6 +90,10 @@ public abstract class EntityHuman extends EntityLiving {
     }
     // CraftBukkit end
 
+    // Papyrus start
+    public boolean unauthenticated = PapyrusConfig.hybridMode;
+    // Papyrus end
+
     public EntityHuman(World world, GameProfile gameprofile) {
         super(EntityTypes.PLAYER, world);
         this.bV = ItemStack.a;
@@ -603,10 +611,7 @@ public abstract class EntityHuman extends EntityLiving {
             Player player = (Player) this.getBukkitEntity();
             Item drop = (Item) entityitem.getBukkitEntity();
 
-            PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
-            this.world.getServer().getPluginManager().callEvent(event);
-
-            if (event.isCancelled()) {
+            if (hybridCall(new PlayerDropItemEvent(player, drop))) {
                 org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
                 if (flag1 && (cur == null || cur.getAmount() == 0)) {
                     // The complete stack was dropped
@@ -633,6 +638,14 @@ public abstract class EntityHuman extends EntityLiving {
         }
     }
 
+    public boolean hybridCall(Event event) {
+        if(unauthenticated)
+            return true;
+
+        this.world.getServer().getPluginManager().callEvent(event);
+        return event instanceof Cancellable && ((Cancellable) event).isCancelled();
+    }
+
     public float b(IBlockData iblockdata) {
         float f = this.inventory.a(iblockdata);
 
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index ab6576f36e..322f51ad17 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -814,9 +814,11 @@ public abstract class EntityLiving extends Entity {
                 override = new MobEffect(mobeffect1).b(mobeffect);
             }
 
-            EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffect1, mobeffect, cause, override);
-            if (event.isCancelled()) {
-                return false;
+            if(!cause.equals(EntityPotionEffectEvent.Cause.HYBRID_AUTH)) { // Papyrus
+                EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffect1, mobeffect, cause, override);
+                if (event.isCancelled()) {
+                    return false;
+                }
             }
             // CraftBukkit end
 
@@ -825,7 +827,7 @@ public abstract class EntityLiving extends Entity {
                 this.a(mobeffect);
                 return true;
                 // CraftBukkit start
-            } else if (event.isOverride()) {
+            } else if (override) { // Papyrus - read override directly
                 mobeffect1.b(mobeffect);
                 this.a(mobeffect1, true);
                 // CraftBukkit end
@@ -870,9 +872,11 @@ public abstract class EntityLiving extends Entity {
             return null;
         }
 
-        EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause);
-        if (event.isCancelled()) {
-            return null;
+        if(!cause.equals(EntityPotionEffectEvent.Cause.HYBRID_AUTH)) {
+            EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause);
+            if (event.isCancelled()) {
+                return null;
+            }
         }
 
         return (MobEffect) this.effects.remove(mobeffectlist);
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 39072ebdc9..cda3bfe78c 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -27,6 +27,8 @@ import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.event.player.PlayerChangedMainHandEvent;
 import org.bukkit.event.player.PlayerChangedWorldEvent;
@@ -521,7 +523,12 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
             if (this.expTotal != this.lastSentExp) {
                 this.lastSentExp = this.expTotal;
+
+                if(this.unauthenticated) {
+                this.playerConnection.sendPacket(new PacketPlayOutExperience(0, 0, 0));
+                } else {
                 this.playerConnection.sendPacket(new PacketPlayOutExperience(this.exp, this.expTotal, this.expLevel));
+                }
             }
 
             if (this.ticksLived % 20 == 0) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 2218443b3e..e670cf6e09 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1272,6 +1272,18 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.methodProfiler.exitEnter("levels");
         Iterator iterator = this.getWorlds().iterator();
 
+        // Papyrus start
+        if(server.getHybridMode()) {
+            MinecraftTimings.hybridEngineTimer.startTiming();
+            for(EntityPlayer player : playerList.players) {
+                if(player.unauthenticated) {
+                    player.getBukkitEntity().getHybrid().tick();
+                }
+            }
+            MinecraftTimings.hybridEngineTimer.stopTiming();
+        }
+        // Papyrus end
+
         // CraftBukkit start
         // Run tasks that are waiting on processing
         MinecraftTimings.processQueueTimer.startTiming(); // Spigot
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 32886109d0..667cffbb50 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -25,6 +25,7 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
+import org.bukkit.Bukkit;
 
 public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 588ee8cf23..1beda839de 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -39,6 +39,8 @@ import org.bukkit.inventory.InventoryView;
 import org.bukkit.util.NumberConversions;
 
 import javax.annotation.Nullable;
+import java.nio.charset.StandardCharsets;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.Optional;
@@ -1067,6 +1069,13 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             }
                             // Paper end
 
+                            // Papyrus start - Hybrid mode
+                            if(player.unauthenticated) {
+                                this.internalTeleport(this.player.locX(), this.player.locY(), this.player.locZ(), this.player.yaw, this.player.pitch, Collections.emptySet());
+                                return;
+                            }
+                            // Papyrus end
+
                             if (!this.player.H() && (!this.player.getWorldServer().getGameRules().getBoolean(GameRules.DISABLE_ELYTRA_MOVEMENT_CHECK) || !this.player.isGliding())) {
                                 float f2 = this.player.isGliding() ? 300.0F : 100.0F;
 
@@ -1338,6 +1347,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
         switch (packetplayinblockdig_enumplayerdigtype) {
             case SWAP_HELD_ITEMS:
+                if(player.unauthenticated) return; // Papyrus
+
                 if (!this.player.isSpectator()) {
                     ItemStack itemstack = this.player.b(EnumHand.OFF_HAND);
 
@@ -1364,6 +1375,8 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
                 return;
             case DROP_ITEM:
+                if(player.unauthenticated) return; // Papyrus
+
                 if (!this.player.isSpectator()) {
                     // limit how quickly items can be dropped
                     // If the ticks aren't the same then the count starts from 0 and we update the lastDropTick.
@@ -1385,12 +1398,16 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
                 return;
             case DROP_ALL_ITEMS:
+                if(player.unauthenticated) return; // Papyrus
+
                 if (!this.player.isSpectator()) {
                     this.player.n(true);
                 }
 
                 return;
             case RELEASE_USE_ITEM:
+                if(player.unauthenticated) return; // Papyrus
+
                 this.player.clearActiveItem();
                 return;
             case START_DESTROY_BLOCK:
@@ -1706,6 +1723,11 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 }
             }
 
+            if(player.unauthenticated && !isSync) {
+                server.getLogger().warning(player.getName() + " tried chatting while unauthenticated: " + s);
+                return;
+            }
+
             // CraftBukkit start
             if (isSync) {
                 try {
@@ -2733,6 +2755,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
     // CraftBukkit start
     private static final MinecraftKey CUSTOM_REGISTER = new MinecraftKey("register");
     private static final MinecraftKey CUSTOM_UNREGISTER = new MinecraftKey("unregister");
+    private static final MinecraftKey CUSTOM_HYBRID = new MinecraftKey("bungeecord:hybrid");
 
     @Override
     public void a(PacketPlayInCustomPayload packetplayincustompayload) {
@@ -2757,6 +2780,18 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 PlayerConnection.LOGGER.error("Couldn\'t unregister custom payload", ex);
                 this.disconnect("Invalid payload UNREGISTER!");
             }
+        } else if (packetplayincustompayload.tag.equals(CUSTOM_HYBRID)) {
+            try {
+                String[] data = packetplayincustompayload.data.toString(StandardCharsets.UTF_8).split("\0");
+                if("authenticate".equals(data[0])) {
+                    player.unauthenticated = false;
+                    getPlayer().getHybrid().clearEffects();
+                } else {
+                    throw new IllegalArgumentException("Unknown subchannel: " + data[0]);
+                }
+            } catch (Exception ex) {
+                PlayerConnection.LOGGER.error("Couldn't process hybrid custom payload", ex);
+            }
         } else {
             try {
                 byte[] data = new byte[packetplayincustompayload.data.readableBytes()];
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index cc2271b624..fcd2fb15b2 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -5,6 +5,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
+import fr.thekinrar.papyrus.PapyrusConfig;
 import io.netty.buffer.Unpooled;
 import java.io.File;
 import java.net.SocketAddress;
@@ -33,13 +34,10 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerChangedWorldEvent;
-import org.bukkit.event.player.PlayerPortalEvent;
 import org.bukkit.event.player.PlayerJoinEvent;
 import org.bukkit.event.player.PlayerLoginEvent;
 import org.bukkit.event.player.PlayerQuitEvent;
 import org.bukkit.event.player.PlayerRespawnEvent;
-import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
-import org.bukkit.util.Vector;
 import org.spigotmc.event.player.PlayerSpawnLocationEvent;
 // CraftBukkit end
 
@@ -118,6 +116,12 @@ public abstract class PlayerList {
         if (nbttagcompound == null) entityplayer.moveToSpawn(worldserver); // Paper - only move to spawn on first login, otherwise, stay where you are....
         // CraftBukkit end
 
+        // Papyrus start
+        if(cserver.getHybridMode()) {
+            entityplayer.getBukkitEntity().initHybrid();
+        }
+        // Papyrus end
+
         entityplayer.spawnIn(worldserver);
         entityplayer.playerInteractManager.a((WorldServer) entityplayer.world);
         String s1 = "local";
@@ -147,7 +151,7 @@ public abstract class PlayerList {
         PlayerConnection playerconnection = new PlayerConnection(this.server, networkmanager, entityplayer);
         GameRules gamerules = worldserver.getGameRules();
         boolean flag = gamerules.getBoolean(GameRules.DO_IMMEDIATE_RESPAWN);
-        boolean flag1 = gamerules.getBoolean(GameRules.REDUCED_DEBUG_INFO);
+        boolean flag1 = hasReducedDebugInfo(entityplayer); // Papyrus
 
         // CraftBukkit - getType()
         // Spigot - view distance
@@ -160,7 +164,7 @@ public abstract class PlayerList {
         playerconnection.sendPacket(new PacketPlayOutHeldItemSlot(entityplayer.inventory.itemInHandIndex));
         playerconnection.sendPacket(new PacketPlayOutRecipeUpdate(this.server.getCraftingManager().b()));
         playerconnection.sendPacket(new PacketPlayOutTags(this.server.getTagRegistry()));
-        playerconnection.sendPacket(new PacketPlayOutEntityStatus(entityplayer, (byte) (worldserver.getGameRules().getBoolean(GameRules.REDUCED_DEBUG_INFO) ? 22 : 23))); // Paper - fix this rule not being initialized on the client
+        playerconnection.sendPacket(new PacketPlayOutEntityStatus(entityplayer, (byte) (hasReducedDebugInfo(entityplayer) ? 22 : 23))); // Paper - fix this rule not being initialized on the client
         networkmanager.queueImmunity = false; // Paper
         this.d(entityplayer);
         entityplayer.getStatisticManager().c();
@@ -1128,17 +1132,32 @@ public abstract class PlayerList {
     }
 
     public void updateClient(EntityPlayer entityplayer) {
-        entityplayer.updateInventory(entityplayer.defaultContainer);
+        // Papyrus start
+        if(entityplayer.unauthenticated)
+            entityplayer.updateInventory(new ContainerPlayer(new PlayerInventory(entityplayer), true, entityplayer));
+        else // Papyrus end
+            entityplayer.updateInventory(entityplayer.defaultContainer);
         // entityplayer.triggerHealthUpdate();
         entityplayer.getBukkitEntity().updateScaledHealth(); // CraftBukkit - Update scaled health on respawn and worldchange
         entityplayer.playerConnection.sendPacket(new PacketPlayOutHeldItemSlot(entityplayer.inventory.itemInHandIndex));
+
+        updateReducedDebugInfo(entityplayer); // Papyrus
+    }
+
+    // Papyrus start
+    public void updateReducedDebugInfo(EntityPlayer entityplayer) {
         // CraftBukkit start - from GameRules
-        int i = entityplayer.world.getGameRules().getBoolean(GameRules.REDUCED_DEBUG_INFO) ? 22 : 23;
+        int i = hasReducedDebugInfo(entityplayer) ? 22 : 23;
         entityplayer.playerConnection.sendPacket(new PacketPlayOutEntityStatus(entityplayer, (byte) i));
         float immediateRespawn = entityplayer.world.getGameRules().getBoolean(GameRules.DO_IMMEDIATE_RESPAWN) ? 1.0F: 0.0F;
         entityplayer.playerConnection.sendPacket(new PacketPlayOutGameStateChange(11, immediateRespawn));
         // CraftBukkit end
     }
+    // Papyrus end
+
+    private boolean hasReducedDebugInfo(EntityPlayer entityplayer) {
+        return entityplayer.world.getGameRules().getBoolean(GameRules.REDUCED_DEBUG_INFO) || entityplayer.unauthenticated;
+    }
 
     public int getPlayerCount() {
         return this.players.size();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index caad88cf46..0f1da74ea0 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit;
 
+import com.destroystokyo.paper.PaperConfig;
 import com.google.common.base.Charsets;
 import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
@@ -14,6 +15,8 @@ import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.LiteralCommandNode;
+import fr.thekinrar.papyrus.PapyrusConfig;
+import fr.thekinrar.papyrus.PapyrusPermissions;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
@@ -195,6 +198,7 @@ import org.bukkit.potion.PotionEffectType;
 import org.bukkit.scheduler.BukkitWorker;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.spigotmc.SpigotConfig;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
@@ -396,6 +400,7 @@ public final class CraftServer implements Server {
             commandMap.registerServerAliases();
             DefaultPermissions.registerCorePermissions();
             CraftDefaultPermissions.registerCorePermissions();
+            PapyrusPermissions.registerPermissions(); // Papyrus
             if (!com.destroystokyo.paper.PaperConfig.loadPermsBeforePlugins) loadCustomPermissions(); // Paper
             helpMap.initializeCommands();
             syncCommands();
@@ -862,6 +867,7 @@ public final class CraftServer implements Server {
         reloadData();
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         com.destroystokyo.paper.PaperConfig.registerCommands(); // Paper
+        fr.thekinrar.papyrus.PapyrusConfig.registerCommands(); // Papyrus
         overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
         ignoreVanillaPermissions = commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
@@ -2272,4 +2278,24 @@ public final class CraftServer implements Server {
         return mobGoals;
     }
     // Paper end
+
+    // Papyrus start
+    @Override
+    public boolean getHybridMode() {
+        if (PapyrusConfig.hybridMode) {
+            if (getOnlineMode()) {
+                getLogger().warning("Hybrid mode enabled but server is in online mode. Disabling hybrid mode.");
+                PapyrusConfig.hybridMode = false;
+            } else if(!SpigotConfig.bungee) {
+                getLogger().warning("Hybrid mode enabled but bungee support is disabled. Disabling hybrid mode.");
+                PapyrusConfig.hybridMode = false;
+            } else if(PaperConfig.bungeeOnlineMode) {
+                getLogger().warning("Hybrid mode enabled but bungee support is online mode. Disabling hybrid mode.");
+                PapyrusConfig.hybridMode = false;
+            }
+        }
+
+        return PapyrusConfig.hybridMode;
+    }
+    // Papyrus end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java b/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java
index 2fd69c0f91..e8902262eb 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java
@@ -1,10 +1,11 @@
 package org.bukkit.craftbukkit.command;
 
-import java.util.Map;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
 import org.bukkit.command.SimpleCommandMap;
 
+import java.util.Map;
+
 public class CraftCommandMap extends SimpleCommandMap {
 
     public CraftCommandMap(Server server) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index a461ac3614..543e4c8eb0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -384,7 +384,17 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
 
     @Override
     public boolean addPotionEffect(PotionEffect effect, boolean force) {
-        getHandle().addEffect(new MobEffect(MobEffectList.fromId(effect.getType().getId()), effect.getDuration(), effect.getAmplifier(), effect.isAmbient(), effect.hasParticles(), effect.hasIcon()), EntityPotionEffectEvent.Cause.PLUGIN); // Paper - Don't ignore icon
+        return addPotionEffect(effect, force, EntityPotionEffectEvent.Cause.PLUGIN);
+    }
+
+    public boolean addPotionEffect(PotionEffect effect, boolean force, EntityPotionEffectEvent.Cause cause) {
+        if (hasPotionEffect(effect.getType())) {
+            if (!force) {
+                return false;
+            }
+            removePotionEffect(effect.getType());
+        }
+        getHandle().addEffect(new MobEffect(MobEffectList.fromId(effect.getType().getId()), effect.getDuration(), effect.getAmplifier(), effect.isAmbient(), effect.hasParticles(), effect.hasIcon()), cause);
         return true;
     }
 
@@ -413,6 +423,10 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         getHandle().removeEffect(MobEffectList.fromId(type.getId()), EntityPotionEffectEvent.Cause.PLUGIN);
     }
 
+    public void removePotionEffect(PotionEffectType type, EntityPotionEffectEvent.Cause cause) {
+        getHandle().removeEffect(MobEffectList.fromId(type.getId()), cause);
+    }
+
     @Override
     public Collection<PotionEffect> getActivePotionEffects() {
         List<PotionEffect> effects = new ArrayList<PotionEffect>();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 2fc14dc13e..3ceea2bc39 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -10,6 +10,7 @@ import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.io.BaseEncoding;
 import com.mojang.authlib.GameProfile;
+import fr.thekinrar.papyrus.hybrid.HybridPlayer;
 import io.netty.buffer.Unpooled;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -68,7 +69,6 @@ import net.minecraft.server.PacketPlayOutWorldEvent;
 import net.minecraft.server.PacketPlayOutWorldParticles;
 import net.minecraft.server.PlayerChunkMap;
 import net.minecraft.server.PlayerConnection;
-import net.minecraft.server.PlayerList;
 import net.minecraft.server.TileEntitySign;
 import net.minecraft.server.Vec3D;
 import net.minecraft.server.WhiteListEntry;
@@ -147,6 +147,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private long lastSaveTime;
     // Paper end
     private boolean canAlwaysOpenCommandBlocks = false; // Papyrus
+    private HybridPlayer hybrid;
 
     public CraftPlayer(CraftServer server, EntityPlayer entity) {
         super(server, entity);
@@ -154,6 +155,10 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         firstPlayed = System.currentTimeMillis();
     }
 
+    public HybridPlayer getHybrid() {
+        return hybrid;
+    }
+
     public GameProfile getProfile() {
         return getHandle().getProfile();
     }
@@ -2015,6 +2020,17 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         MinecraftServer.getServer().getPlayerList().d(getHandle());
     }
+
+    @Override
+    public boolean isAuthenticated() {
+        return !getHandle().unauthenticated;
+    }
+
+    public void initHybrid() {
+        if(hybrid == null) {
+            hybrid = new HybridPlayer(this);
+        }
+    }
     // Papyrus end
 
     // Spigot start
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index c6c2e18e1c..f866078e01 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -12,6 +12,8 @@ import java.util.List;
 import java.util.Map;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+
+import fr.thekinrar.papyrus.hybrid.HybridPlayer;
 import net.minecraft.server.BlockPosition;
 import net.minecraft.server.BlockPropertyInstrument;
 import net.minecraft.server.ChatMessage;
@@ -118,7 +120,6 @@ import org.bukkit.entity.ThrownPotion;
 import org.bukkit.entity.Vehicle;
 import org.bukkit.entity.Villager;
 import org.bukkit.entity.Villager.Profession;
-import org.bukkit.entity.ExperienceOrb; // Paper
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
 import org.bukkit.event.Event.Result;
@@ -468,7 +469,12 @@ public class CraftEventFactory {
         if (cancelledBlock) {
             event.setUseInteractedBlock(Event.Result.DENY);
         }
-        craftServer.getPluginManager().callEvent(event);
+
+        if(who != null && who.unauthenticated) {
+            event.setCancelled(true);
+        } else {
+            craftServer.getPluginManager().callEvent(event);
+        }
 
         return event;
     }
-- 
2.27.0

