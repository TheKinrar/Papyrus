From 0093428af98a7562f4292eb8e3090db41e0c35e9 Mon Sep 17 00:00:00 2001
From: Indhi Rousseau <contact@thekinrar.fr>
Date: Sun, 1 Mar 2020 01:17:13 +0000
Subject: [PATCH] More plugin-loading related APIs


diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 20cf728b9..bb8ba5d0f 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -307,6 +307,13 @@ public final class Bukkit {
     }
     // Paper end
 
+    // Papyrus start
+    @NotNull
+    public static File getPluginFolder() {
+        return server.getPluginFolder();
+    }
+    // Papyrus end
+
     /**
      * Gets the name of the update folder. The update folder is used to safely
      * update plugins at the right moment on a plugin load.
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 983bd93f7..c81ddac74 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -256,6 +256,11 @@ public interface Server extends PluginMessageRecipient {
     }
     // Paper end
 
+    // Papyrus start
+    @NotNull
+    public File getPluginFolder();
+    // Papyrus end
+
     /**
      * Gets the name of the update folder. The update folder is used to safely
      * update plugins at the right moment on a plugin load.
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index 92b66aba6..8ba0c70f1 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -21,6 +21,7 @@ import org.bukkit.command.defaults.PluginsCommand;
 import org.bukkit.command.defaults.ReloadCommand;
 import org.bukkit.command.defaults.VersionCommand;
 import org.bukkit.entity.Player;
+import org.bukkit.plugin.Plugin;
 import org.bukkit.util.StringUtil;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -45,6 +46,13 @@ public class SimpleCommandMap implements CommandMap {
         register("bukkit", new HelpCommand());
     }
 
+    // Papyrus start - unregisterAll
+    public void unregisterAll(@NotNull Plugin plugin) {
+        knownCommands.entrySet().removeIf(entry -> entry.getValue() instanceof PluginCommand
+                && ((PluginCommand) entry.getValue()).getPlugin().equals(plugin));
+    }
+    // Papyrus end
+
     /**
      * {@inheritDoc}
      */
diff --git a/src/main/java/org/bukkit/plugin/PluginLoader.java b/src/main/java/org/bukkit/plugin/PluginLoader.java
index 6ab9cd821..7d3acca0a 100644
--- a/src/main/java/org/bukkit/plugin/PluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/PluginLoader.java
@@ -7,6 +7,7 @@ import java.util.regex.Pattern;
 import org.bukkit.event.Event;
 import org.bukkit.event.Listener;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 /**
  * Represents a plugin loader, which handles direct access to specific types
@@ -28,6 +29,9 @@ public interface PluginLoader {
     @NotNull
     public Plugin loadPlugin(@NotNull File file) throws InvalidPluginException, UnknownDependencyException;
 
+    @NotNull
+    public Plugin loadPlugin(@NotNull File file, @Nullable File parent) throws InvalidPluginException, UnknownDependencyException;
+
     /**
      * Loads a PluginDescriptionFile from the specified file
      *
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index 86cc5025a..62d20b9d9 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -80,6 +80,9 @@ public interface PluginManager {
     @Nullable
     public Plugin loadPlugin(@NotNull File file) throws InvalidPluginException, InvalidDescriptionException, UnknownDependencyException;
 
+    @Nullable
+    public Plugin loadPlugin(@NotNull File file, @Nullable File parentFile) throws InvalidPluginException, InvalidDescriptionException, UnknownDependencyException;
+
     /**
      * Loads the plugins contained within the specified directory
      *
@@ -89,6 +92,12 @@ public interface PluginManager {
     @NotNull
     public Plugin[] loadPlugins(@NotNull File directory);
 
+    // Papyrus start - unload
+
+    public void unloadPlugin(@NotNull Plugin plugin);
+
+    // Papyrus end
+
     /**
      * Disables all the loaded plugins
      */
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 26685f59b..1cd21099c 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -365,6 +365,23 @@ public final class SimplePluginManager implements PluginManager {
         return result.toArray(new Plugin[result.size()]);
     }
 
+    // Papyrus start - unload
+
+    @Override
+    public void unloadPlugin(@NotNull Plugin plugin) {
+        if(plugin.isEnabled()) {
+            disablePlugin(plugin, true);
+        }
+
+        commandMap.unregisterAll(plugin);
+        plugin.getDescription().getPermissions().forEach(this::removePermission);
+
+        plugins.remove(plugin);
+        lookupNames.remove(plugin.getDescription().getName().toLowerCase(java.util.Locale.ENGLISH));
+    }
+
+    // Papyrus end
+
     /**
      * Loads the plugin in the specified file
      * <p>
@@ -380,6 +397,12 @@ public final class SimplePluginManager implements PluginManager {
     @Override
     @Nullable
     public synchronized Plugin loadPlugin(@NotNull File file) throws InvalidPluginException, UnknownDependencyException {
+        return loadPlugin(file, null);
+    }
+
+    @Override
+    @Nullable
+    public synchronized Plugin loadPlugin(@NotNull File file, @Nullable File parentFile) throws InvalidPluginException, UnknownDependencyException {
         Validate.notNull(file, "File cannot be null");
 
         checkUpdate(file);
@@ -394,7 +417,7 @@ public final class SimplePluginManager implements PluginManager {
             if (match.find()) {
                 PluginLoader loader = fileAssociations.get(filter);
 
-                result = loader.loadPlugin(file);
+                result = loader.loadPlugin(file, parentFile);
             }
         }
 
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index 384edf989..c3971761d 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -68,9 +68,14 @@ public final class JavaPluginLoader implements PluginLoader {
         server = instance;
     }
 
+    @Override
+    public @NotNull Plugin loadPlugin(@NotNull File file) throws InvalidPluginException, UnknownDependencyException {
+        return loadPlugin(file, null);
+    }
+
     @Override
     @NotNull
-    public Plugin loadPlugin(@NotNull final File file) throws InvalidPluginException {
+    public Plugin loadPlugin(@NotNull final File file, @Nullable File parentFile) throws InvalidPluginException {
         Validate.notNull(file, "File cannot be null");
 
         if (!file.exists()) {
@@ -84,7 +89,9 @@ public final class JavaPluginLoader implements PluginLoader {
             throw new InvalidPluginException(ex);
         }
 
-        final File parentFile = file.getParentFile();
+        if(parentFile == null)
+            parentFile = file.getParentFile();
+
         final File dataFolder = new File(parentFile, description.getName());
         @SuppressWarnings("deprecation")
         final File oldDataFolder = new File(parentFile, description.getRawName());
-- 
2.27.0

