From 69c4bc171d1581e399c0c36b4d0ccf8f4a2aae0f Mon Sep 17 00:00:00 2001
From: Indhi Rousseau <contact@thekinrar.fr>
Date: Sat, 5 Oct 2019 21:26:09 +0100
Subject: [PATCH] Add CommandBlockEditEvent


diff --git a/src/main/java/org/bukkit/event/block/CommandBlockEditEvent.java b/src/main/java/org/bukkit/event/block/CommandBlockEditEvent.java
new file mode 100644
index 00000000..8264fb5c
--- /dev/null
+++ b/src/main/java/org/bukkit/event/block/CommandBlockEditEvent.java
@@ -0,0 +1,270 @@
+package org.bukkit.event.block;
+
+import org.bukkit.block.Block;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * <p>
+ *     Thrown when a player edits a command block.
+ * </p>
+ *
+ * <p>
+ *     Variables prefixed with <i>old</i> contain current values and cannot be modified, those prefixed with <i>new</i>
+ *     contain the values set by the player and can be modified.
+ * </p>
+ *
+ * <p>
+ *     By default:
+ *     {@link #commandBlocksEnabled} contains the status of command blocks on the server.
+ *     {@link #playerCanEdit} is true if the player is op and in creative mode.
+ *     Both can be modified and will permit overriding of the default logic for this specific event.
+ * </p>
+ *
+ * <p>
+ *     Cancelling the event will make the server ignore the player's editing request silently.
+ *     If the event is not cancelled, the command block will be edited if both {@link #commandBlocksEnabled} and
+ *     {@link #playerCanEdit} are true. Else an appropriate error message will be shown.
+ * </p>
+ */
+public class CommandBlockEditEvent extends BlockEvent implements Cancellable {
+
+    private static final HandlerList handlers = new HandlerList();
+    private boolean cancelled;
+
+    private final Player player;
+    private final String oldCommand;
+    private String newCommand;
+    private final Type oldType;
+    private Type newType;
+    private final boolean oldConditional;
+    private boolean newConditional;
+    private final boolean oldNeedsRedstone;
+    private boolean newNeedsRedstone;
+    private final boolean oldStoresOutput;
+    private boolean newStoresOutput;
+
+    private boolean commandBlocksEnabled;
+    private boolean playerCanEdit;
+
+    public CommandBlockEditEvent(@NotNull Block block, @NotNull Player player,
+                                 @NotNull String oldCommand, @NotNull String newCommand,
+                                 @NotNull Type oldType, @NotNull Type newType,
+                                 boolean oldConditional, boolean newConditional,
+                                 boolean oldNeedsRedstone, boolean newNeedsRedstone,
+                                 boolean oldStoresOutput, boolean newStoresOutput,
+                                 boolean commandBlocksEnabled, boolean playerCanEdit) {
+        super(block);
+        this.player = player;
+        this.oldCommand = oldCommand;
+        this.newCommand = newCommand;
+        this.oldType = oldType;
+        this.newType = newType;
+        this.oldConditional = oldConditional;
+        this.newConditional = newConditional;
+        this.oldNeedsRedstone = oldNeedsRedstone;
+        this.newNeedsRedstone = newNeedsRedstone;
+        this.oldStoresOutput = oldStoresOutput;
+        this.newStoresOutput = newStoresOutput;
+        this.commandBlocksEnabled = commandBlocksEnabled;
+        this.playerCanEdit = playerCanEdit;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    /**
+     * Gets the Player who edited the command block.
+     * @return The Player who edited the command block.
+     */
+    @NotNull
+    public Player getPlayer() {
+        return player;
+    }
+
+    /**
+     * Gets the currently set command for this command block.
+     * @return the currently set command
+     */
+    @NotNull
+    public String getOldCommand() {
+        return oldCommand;
+    }
+
+    /**
+     * Gets the current command block type.
+     * @return The current command block type
+     */
+    @NotNull
+    public Type getOldType() {
+        return oldType;
+    }
+
+    /**
+     * Gets the current conditional state of the command block.
+     * @return The current conditional state
+     */
+    public boolean getOldConditional() {
+        return oldConditional;
+    }
+
+    /**
+     * Gets the current <i>needs redstone</i> state of the command block.
+     * @return The current <i>needs redstone</i> state
+     */
+    public boolean getOldNeedsRedstone() {
+        return oldNeedsRedstone;
+    }
+
+    /**
+     * Gets the current <i>stores output</i> state of the command block.
+     * @return The current <i>stores output</i> state
+     */
+    public boolean getOldStoresOutput() {
+        return oldStoresOutput;
+    }
+
+    /**
+     * Gets the command that will be set if editing succeeds.
+     * @return The command to set
+     */
+    @NotNull
+    public String getNewCommand() {
+        return newCommand;
+    }
+
+    /**
+     * Sets the command that will be set if editing succeeds.
+     * @param newCommand The command to set
+     */
+    public void setNewCommand(@NotNull String newCommand) {
+        this.newCommand = newCommand;
+    }
+
+    /**
+     * Gets the type that will be set if editing succeeds.
+     * @return The type to set
+     */
+    @NotNull
+    public Type getNewType() {
+        return newType;
+    }
+
+    /**
+     * Sets the type that will be set if editing succeeds.
+     * @param newType The type to set
+     */
+    public void setNewType(@NotNull Type newType) {
+        this.newType = newType;
+    }
+
+    /**
+     * Gets the conditional state that will be set if editing succeeds.
+     * @return The conditional state to set
+     */
+    public boolean getNewConditional() {
+        return newConditional;
+    }
+
+    /**
+     * Sets the conditional state that will be set if editing succeeds.
+     * @param newConditional The conditional state to set
+     */
+    public void setNewConditional(boolean newConditional) {
+        this.newConditional = newConditional;
+    }
+
+    /**
+     * Gets the <i>needs redstone</i> state that will be set if editing succeeds.
+     * @return The <i>needs redstone</i> state to set
+     */
+    public boolean getNewNeedsRedstone() {
+        return newNeedsRedstone;
+    }
+
+    /**
+     * Sets the <i>needs redstone</i> state that will be set if editing succeeds.
+     * @param newNeedsRedstone The <i>needs redstone</i> state to set
+     */
+    public void setNewNeedsRedstone(boolean newNeedsRedstone) {
+        this.newNeedsRedstone = newNeedsRedstone;
+    }
+
+    /**
+     * Gets the <i>stores output</i> state that will be set if editing succeeds.
+     * @return The <i>stores output</i> state to set
+     */
+    public boolean getNewStoresOutput() {
+        return newStoresOutput;
+    }
+
+    /**
+     * Sets the <i>stores output</i> state that will be set if editing succeeds.
+     * @param newStoresOutput The <i>stores output</i> state to set
+     */
+    public void setNewStoresOutput(boolean newStoresOutput) {
+        this.newStoresOutput = newStoresOutput;
+    }
+
+    /**
+     * Gets the command block enabled status that will be used to compute editing success.
+     * @return The command block enabled status
+     */
+    public boolean getCommandBlocksEnabled() {
+        return commandBlocksEnabled;
+    }
+
+    /**
+     * Sets the command block enabled status that will be used to compute editing success.
+     * @param commandBlocksEnabled The command block enabled status
+     */
+    public void setCommandBlocksEnabled(boolean commandBlocksEnabled) {
+        this.commandBlocksEnabled = commandBlocksEnabled;
+    }
+
+    /**
+     * Gets the player editing authorization status that will be used to compute editing success.
+     * @return The player editing authorization status
+     */
+    public boolean getPlayerCanEdit() {
+        return playerCanEdit;
+    }
+
+    /**
+     * Sets the player editing authorization status that will be used to compute editing success.
+     * @param playerCanEdit The player editing authorization status
+     */
+    public void setPlayerCanEdit(boolean playerCanEdit) {
+        this.playerCanEdit = playerCanEdit;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+    /**
+     * Command block types.
+     */
+    public enum Type {
+        IMPULSE,
+        CHAIN,
+        REPEAT
+    }
+
+}
-- 
2.24.1

